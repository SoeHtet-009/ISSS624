[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html",
    "href": "Hands-on Exercise 01/Hands-on_01.html",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "",
    "text": "Hand-on exercise 1 teaches how to import and wrangle geospatial data using R packages."
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#getting-started",
    "href": "Hands-on Exercise 01/Hands-on_01.html#getting-started",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#importing-geospatial-data",
    "href": "Hands-on Exercise 01/Hands-on_01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImport polygon feature data\n\npacman::p_load(sf,tidyverse)\n\n\nmpsz <- st_read(dsn=\"geospatial\",layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Soe Htet\\ISSS624\\Hands-on Exercise 01\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ncyclingpath <- st_read(dsn=\"geospatial\",\n                      layer=\"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Soe Htet\\ISSS624\\Hands-on Exercise 01\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\npreschool <- st_read(\"geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Soe Htet\\ISSS624\\Hands-on Exercise 01\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#working-with-st_geometry",
    "href": "Hands-on Exercise 01/Hands-on_01.html#working-with-st_geometry",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Working with st_geometry()",
    "text": "Working with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303..."
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#working-with-glimpse",
    "href": "Hands-on Exercise 01/Hands-on_01.html#working-with-glimpse",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Working with glimpse()",
    "text": "Working with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#working-with-head",
    "href": "Hands-on Exercise 01/Hands-on_01.html#working-with-head",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Working with head()",
    "text": "Working with head()\n\nhead(mpsz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#plotting-the-geospatial-data",
    "href": "Hands-on Exercise 01/Hands-on_01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Plotting the geospatial data",
    "text": "Plotting the geospatial data\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#working-with-projection",
    "href": "Hands-on Exercise 01/Hands-on_01.html#working-with-projection",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 = st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "Hands-on Exercise 01/Hands-on_01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Transforming the projection of preschool from wgs84 to svy21",
    "text": "Transforming the projection of preschool from wgs84 to svy21\n\npreschool3414 = st_transform(preschool,crs=3414)\npreschool3414\n\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\nescription\n1                                                          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BIG FOOT PRE SCHOOL LLP</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9281</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>196, WEST COAST ROAD, SINGAPORE 127375</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>127375</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>838CD358794FD031</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n2                      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>POSSO PRESCHOOL @ WEST COAST RISE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT8684</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>30, WEST COAST RISE, HONG LEONG GARDEN, SINGAPORE 127473</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>127473</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F331CEB175F9C254</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n3                                                         <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>GENESIS CHILD CARE PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9132</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2A, JUBILEE ROAD, SINGAPORE 128524</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128524</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>4C2E7E55019A633F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n4                                                 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>LITTLE FOOTPRINTS PRESCHOOL PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9260</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>6, JUBILEE ROAD, SINGAPORE 128531</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128531</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>DDF98422A198387B</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n5                                <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>AMAR KIDZ @ WEST COAST LLP</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9016</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>8, JALAN LEMPENG, #02 - 03, PARK WEST CONDO, SINGAPORE 128796</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128796</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>EAB3263D23F126AF</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n6                                            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>TCC PRESCHOOL FABER PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9299</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>60, FABER TERRACE, FABER HILLS, SINGAPORE 129040</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>129040</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>195E3739B77E6A5F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n7                      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>ACEKIDZ @ COMMUNITY</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT5950</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2, CLEMENTI WEST ST 2, #03 - 06, WEST COAST COMMUNITY CENTRE, SINGAPORE 129605</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>129605</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>9B1070EE1CB4A3E2</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n8                   <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>PCF SPARKLETOTS PRESCHOOL @ QUEENSTOWN BLK 145 (CC)</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>ST0092</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>145, MEI LING STREET, #01 - 137, SINGAPORE 140145</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>140145</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>820E90716985CCCA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n9  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>PCF SPARKLETOTS PRESCHOOL @ QUEENSTOWN BLK 53A (CC)</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>ST0176</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>53A, STRATHMORE AVENUE, #01 - 01, FORFAR HEIGHTS, SINGAPORE 143053</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>143053</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>A7DC7D2C961A8822</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n10                                                     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>MY FIRST SKOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>NT0510</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>106, HENDERSON CRESCENT, #01 - 37, SINGAPORE 150106</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>150106</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>EB3942B460BB5CBC</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n                        geometry\n1  POINT Z (19997.26 32333.17 0)\n2  POINT Z (19126.75 33114.35 0)\n3  POINT Z (20345.12 31934.56 0)\n4  POINT Z (20400.31 31952.36 0)\n5  POINT Z (19810.78 33140.31 0)\n6  POINT Z (19550.92 33770.18 0)\n7  POINT Z (20378.07 31665.55 0)\n8  POINT Z (24835.77 30689.38 0)\n9   POINT Z (25139.3 30636.01 0)\n10 POINT Z (26771.14 30203.71 0)"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on Exercise 01/Hands-on_01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Importing and Converting An Aspatial Data",
    "text": "Importing and Converting An Aspatial Data\n\nlistings = read.csv(\"aspatial/listings.csv\")\n\n\nlistings_sf <- st_as_sf (listings,\n                         coords=c(\"longitude\",\"latitude\"),\n                         crs = 4326) %>%\n  st_transform(crs=3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <int> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <int> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <int> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <int> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <int> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <chr> \"2014-07-08\", \"2019-12-28\", \"2014-12-10…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <int> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <int> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#geoprocessing-with-sf-package",
    "href": "Hands-on Exercise 01/Hands-on_01.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath,dist=5,nQuadSegs = 30)\n\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#point-in-polygon-count",
    "href": "Hands-on Exercise 01/Hands-on_01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Point in Polygon Count",
    "text": "Point in Polygon Count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#exploratory-data-analysis",
    "href": "Hands-on Exercise 01/Hands-on_01.html#exploratory-data-analysis",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nWith ggplot2\n\nggplot(data=mpsz3414,aes(x=as.numeric(`PreSch Density`)))+\n         geom_histogram(bins=20,color='black',fill='light blue')+\n         labs(title = \"Are pre-school evenly distributed in Singapore?\",\n              subtitle='...',\n              x=\"Pre sch density (per km sq)\",\n              y=\"Frequency\")\n\n\n\n\n\nggplot(data=mpsz3414,aes(x=as.numeric(`PreSch Density`),y=`PreSch Count`))+\n         geom_point()+\n         labs(title = \"Are pre-school evenly distributed in Singapore?\",\n              subtitle='...',\n              x=\"Pre sch density (per km sq)\",\n              y=\"Count\")"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#choropleth-mapping-with-r",
    "href": "Hands-on Exercise 01/Hands-on_01.html#choropleth-mapping-with-r",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "2  Choropleth Mapping with R",
    "text": "2  Choropleth Mapping with R\n\npacman::p_load(tmap)\n\n\nImporting geospatial data into R\n\npopdata <- read.csv('aspatial/respopagesextod2011to2020.csv')\n\n\n\nData Wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(POP = sum(Pop)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP)%>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n  rowSums(.[13:15]))%>%\n  mutate(AGED=rowSums(.[16:21])) %>%\n  mutate(TOTAL=rowSums(.[3:21])) %>%  \n  mutate(DEPENDENCY = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%  \n  select(PA, SZ, YOUNG, \n       `ECONOMY ACTIVE`, AGED, \n        TOTAL, DEPENDENCY)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars=vars(PA,SZ),\n            .funs=funs(toupper)) %>%\n  filter (`ECONOMY ACTIVE`>0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\n\n\nmpsz_pop2020 <- left_join(mpsz,popdata2020,by=c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on Exercise 01/Hands-on_01.html#choropleth-mapping-geospatial-data-using-qtm",
    "href": "Hands-on Exercise 01/Hands-on_01.html#choropleth-mapping-geospatial-data-using-qtm",
    "title": "Hands-on Exercise 01 Data Wrangling with R",
    "section": "Choropleth Mapping Geospatial Data Using qtm()",
    "text": "Choropleth Mapping Geospatial Data Using qtm()\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map using qtm()\n\nlibrary(tmap)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map by using tmap's elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() & tm_borders()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\nData Classification Methods of tmap\nPlotting choropleth maps with built in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting Choropleth Maps With Custom Breaks\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\nColour Schemes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Layout\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMapping spatial object meeting a certain criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#getting-started",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 The Analytical Question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n4.2.2 Study Area And Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n4.2.3 Setting The Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf,tidyverse,tmap,spdep)"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#getting-the-data-into-r-environment",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#getting-the-data-into-r-environment",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3 Getting The Data Into R Environment",
    "text": "4.3 Getting The Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n4.3.1 Import Shapefile Into R Environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan <- st_read(dsn = \"geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Soe Htet\\ISSS624\\Hands-on Exercise 02\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n4.3.2 Import CSV File to R Environment\n\nhunan2012 <- read.csv(\"aspatial/Hunan_2012.csv\")\n\n\n\n4.3.3 Performing Relational Join\nLeft join function of dplyr is used to join hunan simple feature table and hunan2012 attribute table.\n\nhunan = left_join(hunan,hunan2012,by=c(\"County\"=\"County\"))\n\n\n\n4.3.4 Visualizing Regional Development Indicator\nWe will explore the use of tmap package to plot choropleth map based on GDP Per Capita values.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#global-spatial-autocorrelation",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#global-spatial-autocorrelation",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\n\n4.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q = poly2nb(hunan,queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that region 85 is the most connected region with 11 links and region 30 & 65 are least connected with 1 link each.\n\n\n4.4.2 Row Standardized Weight Matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q,style=\"W\",zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation : Moran’s I\nIn this section, we will learn how to perform Moran’s I statistical test using moran.test() function of spdep.\n\n\n4.4.4 Moran’s I Test\n\nmoran.test(hunan$GDPPC,rswm_q,zero.policy=TRUE,na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n4.4.4.1 Computing Monte Carlo’s Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n4.4.4.2 Visualizing Monte Carlo Moran’s I\nMoran’s I statistics can be plotted by using the code chunks below.\n\nmean(bperm$res)\n\n[1] -0.01472993\n\n\n\nvar(bperm$res)\n\n[1] 0.004466925\n\n\n\nsummary(bperm$res)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06167 -0.02113 -0.01473  0.02617  0.30075 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks = 20,\n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n4.4.5 Global Spatial Autocorrelation : Geary’s\nIn this section, we will learn how to perform Geary’s C statistical test by using geary.test() of spdep package.\n\n4.4.5.1 Geary’s C Test\n\ngeary.test(hunan$GDPPC,rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n4.4.5.2 Computing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm = geary.mc(hunan$GDPPC,rswm_q,nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n4.4.5.3 Visualizing Monte Carlo Geary’s C\n\nmean(bperm$res)\n\n[1] 1.004089\n\nvar(bperm$res)\n\n[1] 0.007527444\n\nsummary(bperm$res)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6907  0.9501  1.0050  1.0041  1.0594  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#spatial-correlogram",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#spatial-correlogram",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Compute Moran’s I Correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q,hunan$GDPPC,order=6,method=\"I\",style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n4.5.2 Compute Geary’s Correlogram\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#cluster-and-outlier-analysis",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#cluster-and-outlier-analysis",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.6 Cluster And Outlier Analysis",
    "text": "4.6 Cluster And Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n4.6.1.1 Mapping the Local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.2 Mapping the Local Moran’s I Values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.6.1.3 Mapping Local Maran’s I P Values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.1.4 Mapping Both Local Maran’s I Values And P Values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#creating-lisa-cluster-map",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#creating-lisa-cluster-map",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7 Creating LISA Cluster Map",
    "text": "4.7 Creating LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n4.7.1 Ploting Moran Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n4.7.2 Plotting Moran’s Scatterplot with Standardised Variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n4.7.3 Preparing LISA Cluster Map\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC) \n\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\n\nsignif = 0.05\n\nThese four command lines define the high-high, low-low, low-high and high-low categories.\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 2      \nquadrant[DV <0 & C_mI>0] <- 1\nquadrant[DV >0 & C_mI<0] <- 3   \n\nLastly, p value less than significance level will be assigned as 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.7.4 Plotting LISA Map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.8 Hot Spot And Cold Spot Area Analysis",
    "text": "4.8 Hot Spot And Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis And Ord’s G Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving Distance Based Weight Matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n4.8.2.3 Computing Fixed Distance Weight Matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n4.8.3 Computing Adaptive Distance Weight Matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on Exercise 02/Hands-on_Ex02.html#computing-g-statistics",
    "href": "Hands-on Exercise 02/Hands-on_Ex02.html#computing-g-statistics",
    "title": "4 Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9 Computing G Statistics",
    "text": "4.9 Computing G Statistics\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n4.9.2 Mapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n4.9.3 Gi statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n4.9.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_01.html",
    "href": "Hands-on_01.html",
    "title": "Hands-on_01",
    "section": "",
    "text": "Overview\nThis is overview paragraph test\nGetting started\nThis is getting started paragraph test"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_ex01.html",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_ex01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.\n\nThe code chunk below will install tidyverse and sf packages.\n\npacman::p_load(tidyverse,sf,tmap)\n\n\n\n\nThe code chunk below is used to import geospatial data to R.\n\nmpsz = st_read(dsn=\"geospatial\",layer='MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Soe Htet\\ISSS624\\In-Class_Exercise\\In-class_Ex01\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\npreschool = st_read(\"geospatial/pre-schools-location-kml.kml\") %>%\n  st_transform(crs=3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Soe Htet\\ISSS624\\In-Class_Exercise\\In-class_Ex01\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nst_geometry(preschool)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\n\npacman::p_load(spdep)\nhunan = st_read(dsn=\"data/geospatial\",layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Soe Htet\\ISSS624\\In-Class_Exercise\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read.csv(\"data/aspatial/Hunan_2012.csv\")\nhead(hunan2012,5)\n\n   County       City avg_wage deposite    FAI Gov_Rev Gov_Exp     GDP GDPPC\n1   Anhua     Yiyang    30544  10967.0 6831.7  456.72  2703.0 13225.0 14567\n2   Anren   Chenzhou    28058   4598.9 6386.1  220.57  1454.7  4941.2 12761\n3 Anxiang    Changde    31935   5517.2 3541.0  243.64  1779.5 12482.0 23667\n4 Baojing Hunan West    30843   2250.0 1005.4  192.59  1379.1  4087.9 14563\n5 Chaling    Zhuzhou    31251   8241.4 6508.4  620.19  1947.0 11585.0 20078\n     GIO   Loan  NIPCR  Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household\n1 9276.9 3954.9 3528.3 2718 494.31 441.4 338.0  54.175  32.830     290.4\n2 4189.2 2555.3 3271.8  970 290.82 255.4  99.4  33.171  17.505     104.6\n3 5108.9 2806.9 7693.7 1931 336.39 270.5 205.9  19.584  17.819     148.1\n4 3623.5 1253.7 4191.3  927 195.17 145.6 116.4  19.249  11.831      73.2\n5 9157.7 4287.4 3887.7 1449 330.29 299.0 154.0  33.906  20.548     148.7\n  Household_R NOIP Pop_R    RSCG Pop_T     Agri Service Disp_Inc      RORP\n1       234.5  101 670.3 5760.60 910.8 4942.253  5414.5    12373 0.7359464\n2       121.9   34 243.2 2386.40 388.7 2357.764  3814.1    16072 0.6256753\n3       135.4   53 346.0 3957.90 528.3 4524.410 14100.0    16610 0.6549309\n4        69.9   18 184.1  768.04 281.3 1118.561   541.8    13455 0.6544614\n5       139.4  106 301.6 4009.50 578.4 3793.550  5444.0    20461 0.5214385\n     ROREmp\n1 0.8929619\n2 0.8782065\n3 0.8041262\n4 0.7460163\n5 0.9052651\n\n\n\n\n\n\nThe code chunk below is used to perform left join above two tables.\n\nhunan1 <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\n\nNow we are going to plot base map and choropleth map by using qtm() of tmap package.\n\nbasemap <- tm_shape(hunan1) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.3)\ngdppc <- qtm(hunan1, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nIn this section, we will learn how to use poly2nb() of spdep package to compute continguity weight matrix for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n\n\nwm_q <- poly2nb(hunan1, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFrom the summary report, we can observe that polygon 85 has the most number of neighbours with 11 and polygon 30 and 65 have the least with 1 neighbour each.\nTo find the neighbours of a polygon, we can use the code below.\n\nwm_q[[85]]\n\n [1]  1  2  3  5  6 32 56 57 69 75 78\n\n\nTo find the name of county that belongs to the polygon number, the code below can be used.\n\nhunan1$County[85]\n\n[1] \"Taoyuan\"\n\n\n\nhunan1$County[wm_q[[85]]]\n\n [1] \"Anxiang\"  \"Hanshou\"  \"Jinshi\"   \"Linli\"    \"Shimen\"   \"Yuanling\"\n [7] \"Anhua\"    \"Nan\"      \"Cili\"     \"Sangzhi\"  \"Taojiang\"\n\n\n\nhunan1$GDPPC[wm_q[[85]]]\n\n [1] 23667 20981 34592 25554 27137 24194 14567 21311 18714 14624 19509\n\n\nWe can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan1, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude,latitude)\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")\n\n\n\n\n\n\n\n\nIn this section, we will explore the use of knearneigh(), knn2nb() and nbdists() functions of spdep package for the computation of distance based neighbours.\n\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nWe reveal the complete neighbour list by using str() function.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style=\"W\" option for simplicity's sake but note that other more robust options are available, notably style=\"B\".\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\n\n\nGDPPC.lag <- lag.listw(rswm_q, hunan1$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nlag.list <- list(hunan1$NAME_3, GDPPC.lag)\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan1 <- left_join(hunan1,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan1, \"GDPPC\")\nlag_gdppc <- qtm(hunan1, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan1$NAME_3, lag.listw(b_weights2, hunan1$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan1 <- left_join(hunan1, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan1, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan1, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nwm_q1 <- nb2listw(wm_q1)\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, hunan1$GDPPC)\n\n\nlag.list.wm_q1 <- list(hunan1$NAME_3, lag.listw(wm_q1, hunan1$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan1 <- left_join(hunan1, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan1, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan1, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan1$NAME_3, lag.listw(b_weights2, hunan1$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\nhunan1 <- left_join(hunan1, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan1, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan1, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#getting-started",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#getting-started",
    "title": "In Class Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\n\npacman::p_load(spdep,tidyverse,tmap,sf,funModeling)"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#importing-geospatial-data",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#importing-geospatial-data",
    "title": "In Class Exercise 2",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nnigeria_1 <- st_read(dsn = \"geospatial\", \n                 layer = \"geoBoundaries-NGA-ADM2\",\n                 crs = 4326)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\Soe Htet\\ISSS624\\In-Class_Exercise\\In-class_Ex02\\Geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\nnigeria_1\n\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\nFirst 10 features:\n        shapeName Level                    shapeID shapeGroup shapeType\n1       Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2       Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3          Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n4           Abaji  ADM2 NGA-ADM2-72505758B61968000        NGA      ADM2\n5            Abak  ADM2 NGA-ADM2-72505758B39432389        NGA      ADM2\n6       Abakaliki  ADM2 NGA-ADM2-72505758B36739173        NGA      ADM2\n7  Abeokuta North  ADM2 NGA-ADM2-72505758B86358915        NGA      ADM2\n8  Abeokuta South  ADM2 NGA-ADM2-72505758B56925175        NGA      ADM2\n9             Abi  ADM2  NGA-ADM2-72505758B1616690        NGA      ADM2\n10    Aboh-Mbaise  ADM2 NGA-ADM2-72505758B78555816        NGA      ADM2\n                         geometry\n1  MULTIPOLYGON (((7.401109 5....\n2  MULTIPOLYGON (((7.334479 5....\n3  MULTIPOLYGON (((13.83477 13...\n4  MULTIPOLYGON (((7.045872 9....\n5  MULTIPOLYGON (((7.811244 5....\n6  MULTIPOLYGON (((8.4109 6.28...\n7  MULTIPOLYGON (((3.143903 7....\n8  MULTIPOLYGON (((3.301615 7....\n9  MULTIPOLYGON (((8.153282 5....\n10 MULTIPOLYGON (((7.321909 5...."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#importing-attribute-data",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#importing-attribute-data",
    "title": "In Class Exercise 2",
    "section": "Importing Attribute Data",
    "text": "Importing Attribute Data\n\nnigeria_2 <- read.csv(\"Nigeria_Att.csv\")\n\nTibble dataframe is transformed to sf data table in code chunk below.\n\nnigeria_2 <- st_as_sf(nigeria_2, \n                       coords = c(\"lon_deg\", \"lat_deg\"),\n                       crs=4326) \n\nBlank rows of status column are replaced with unknown.\n\nnigeria_2$status_clean[nigeria_2$status_clean==\"\"] = \"Unknown\""
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#eda",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#eda",
    "title": "In Class Exercise 2",
    "section": "EDA",
    "text": "EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_clean field in nigeria_2.\n\nfreq(data=nigeria_2, \n     input = 'status_clean')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#extracting-water-point-data",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#extracting-water-point-data",
    "title": "In Class Exercise 2",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will learn how to classify functional and non-functional water point in nigeria_2 data.\n\nExtracting Functional Water Points\n\nfunctional <- nigeria_2 %>%\n  filter(status_clean %in% c(\"Functional\",\n                             \"Functional but needs repair\",\n                             \"Functional but not in use\"))\nfreq(data=functional, \n     input = 'status_clean')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\nExtracting Non-functional Water Points\n\nNon_functional <- nigeria_2 %>%\n  filter(status_clean %in% c(\"Non-Functional\",\n                             \"Non-Functional due to dry season\",\n                             \"Non functional but not in use\",\n                             \"Abandoned/Decommissioned\",\n                             \"Abandoned\"))\nfreq(data=Non_functional, \n     input = 'status_clean')\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.27           91.27\n2 Non-Functional due to dry season      2403       7.46           98.73\n3         Abandoned/Decommissioned       234       0.73           99.46\n4                        Abandoned       175       0.54          100.00\n\n\n\n\nExtracting Unknown Status Water Point\n\nUnknown <- nigeria_2 %>%\n  filter(status_clean == \"Unknown\")"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#performing-point-in-polygon-count",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#performing-point-in-polygon-count",
    "title": "In Class Exercise 2",
    "section": "Performing Point In Polygon Count",
    "text": "Performing Point In Polygon Count\n\nnigeria_1 <- nigeria_1 %>% \n  mutate(`total_wpt` = lengths(\n    st_intersects(nigeria_1, nigeria_2))) %>%\n  mutate(`wpt_functional` = lengths(\n    st_intersects(nigeria_1, functional))) %>%\n  mutate(`wpt_non-functional` = lengths(\n    st_intersects(nigeria_1, Non_functional))) %>%\n  mutate(`wpt_unknown` = lengths(\n    st_intersects(nigeria_1, Unknown)))"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#saving-analytical-data",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#saving-analytical-data",
    "title": "In Class Exercise 2",
    "section": "Saving Analytical Data",
    "text": "Saving Analytical Data\n\nnigeria_1 <- nigeria_1 %>%\n  mutate(pct_functional = `wpt_functional`/`total_wpt`) %>%\n  mutate(`pct_non-functional` = `wpt_non-functional`/`total_wpt`) \n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only relevant fields.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#visualizing-spatial-distribution-of-water-points",
    "href": "In-Class_Exercise/In-class_Ex02/In-class_ex02.html#visualizing-spatial-distribution-of-water-points",
    "title": "In Class Exercise 2",
    "section": "Visualizing Spatial Distribution of Water Points",
    "text": "Visualizing Spatial Distribution of Water Points\n\n#|fig-width: 14\n#|fig-height: 12\n\ntotal <- qtm(nigeria_1, \"total_wpt\")\nwp_functional <- qtm(nigeria_1, \"wpt_functional\")\nwp_nonfunctional <- qtm(nigeria_1, \"wpt_non-functional\")\nunknown <- qtm(nigeria_1, \"wpt_unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown,asp=1, ncol=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Hello everyone, I will share with you my learning journey of geospatial analytics in this blog."
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, we will apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of non-functional water points. Nigeria will be the country of study for this assignment."
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#getting-started",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#getting-started",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFirstly, we will install libraries below for data wrangling and geospatial analysis purposes.\n\npacman::p_load(spdep,tidyverse,tmap,sf,funModeling,rgeoda)"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#importing-geospatial-data",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#importing-geospatial-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "3 Importing Geospatial Data",
    "text": "3 Importing Geospatial Data\nTo import a shapefile object, st_read() function of sf package can be used as shown in the code chunk below.\n\nnigeria_1 <- st_read(dsn = \"geospatial\", \n                 layer = \"geoBoundaries-NGA-ADM2\",\n                 crs = 4326)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\Soe Htet\\ISSS624\\Take Home Exercise\\Take Home Exercise 1\\Geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\nnigeria_1\n\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\nFirst 10 features:\n        shapeName Level                    shapeID shapeGroup shapeType\n1       Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2       Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3          Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n4           Abaji  ADM2 NGA-ADM2-72505758B61968000        NGA      ADM2\n5            Abak  ADM2 NGA-ADM2-72505758B39432389        NGA      ADM2\n6       Abakaliki  ADM2 NGA-ADM2-72505758B36739173        NGA      ADM2\n7  Abeokuta North  ADM2 NGA-ADM2-72505758B86358915        NGA      ADM2\n8  Abeokuta South  ADM2 NGA-ADM2-72505758B56925175        NGA      ADM2\n9             Abi  ADM2  NGA-ADM2-72505758B1616690        NGA      ADM2\n10    Aboh-Mbaise  ADM2 NGA-ADM2-72505758B78555816        NGA      ADM2\n                         geometry\n1  MULTIPOLYGON (((7.401109 5....\n2  MULTIPOLYGON (((7.334479 5....\n3  MULTIPOLYGON (((13.83477 13...\n4  MULTIPOLYGON (((7.045872 9....\n5  MULTIPOLYGON (((7.811244 5....\n6  MULTIPOLYGON (((8.4109 6.28...\n7  MULTIPOLYGON (((3.143903 7....\n8  MULTIPOLYGON (((3.301615 7....\n9  MULTIPOLYGON (((8.153282 5....\n10 MULTIPOLYGON (((7.321909 5....\n\n\nThe imported file has WGS 84 coordinate system,774 rows and five columns including multipolygon geometry coordinates.\nShapename column of sf object will be analyzed to check if there are any duplicates.\n\nduplicates <-nigeria_1[duplicated(nigeria_1$shapeName), ]\nduplicates\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 4.249275 ymin: 7.806164 xmax: 9.020704 ymax: 10.39507\nGeodetic CRS:  WGS 84\n    shapeName Level                    shapeID shapeGroup shapeType\n95      Bassa  ADM2 NGA-ADM2-72505758B52690633        NGA      ADM2\n305  Ifelodun  ADM2 NGA-ADM2-72505758B18326272        NGA      ADM2\n356  Irepodun  ADM2 NGA-ADM2-72505758B79178637        NGA      ADM2\n520  Nasarawa  ADM2 NGA-ADM2-72505758B67188591        NGA      ADM2\n547       Obi  ADM2  NGA-ADM2-72505758B3073896        NGA      ADM2\n694  Surulere  ADM2 NGA-ADM2-72505758B31597260        NGA      ADM2\n                          geometry\n95  MULTIPOLYGON (((8.823522 10...\n305 MULTIPOLYGON (((4.721977 7....\n356 MULTIPOLYGON (((4.543349 7....\n520 MULTIPOLYGON (((7.493228 8....\n547 MULTIPOLYGON (((9.008576 8....\n694 MULTIPOLYGON (((4.375293 8....\n\n\nThe above summary reveals that 6 secondary administrative appear more than once in the data. However, upon further checking, geometries of duplicate shape names are found to be different. Thus, it will not be deleted to prevent loss of information.\nNevertheless, as duplicated shape names can pose problems in subsequent analysis, we will rename the names as below.\n\nnigeria_1[95,\"shapeName\"] <- \"Bassa1\"\nnigeria_1[305,\"shapeName\"] <- \"Ifelodun1\"\nnigeria_1[356,\"shapeName\"] <- \"Irepodun1\"\nnigeria_1[520,\"shapeName\"] <- \"Nasarawa1\"\nnigeria_1[547,\"shapeName\"] <- \"Obi1\"\nnigeria_1[694,\"shapeName\"] <- \"Surulere1\"\n\nNow, another check is done to ensure there is no more duplicate.\n\nduplicates <-nigeria_1[duplicated(nigeria_1$shapeName), ]\nduplicates\n\nSimple feature collection with 0 features and 5 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName  Level      shapeID    shapeGroup shapeType  geometry  \n<0 rows> (or 0-length row.names)"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#importing-attribute-data",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#importing-attribute-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "4 Importing Attribute Data",
    "text": "4 Importing Attribute Data\nTo import csv fiile, read.csv() function can be utilized. The data has been cleaned beforehand to filter the country to include Nigeria only. Otherwise, filter() function of dplyr can be used to exclude all the other countries.\n\nnigeria_2 <- read.csv(\"Nigeria_Att.csv\")\n\nTibble dataframe is transformed to sf data table in code chunk below.\n\nnigeria_2 <- st_as_sf(nigeria_2, \n                       coords = c(\"lon_deg\", \"lat_deg\"),\n                       crs=4326) \n\nThe column we are interested in “status_clean” is found to contain blank values. They will be replace with text “unknown” as seen in the code chunk below.\n\nnigeria_2$status_clean[nigeria_2$status_clean==\"\"] = \"Unknown\""
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#eda",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#eda",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "5 EDA",
    "text": "5 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_clean field in attribute data set nigeria_2.\n\nfreq(data=nigeria_2, \n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#extracting-water-point-data",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#extracting-water-point-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "6 Extracting Water Point Data",
    "text": "6 Extracting Water Point Data\nIn this section, we will learn how to classify functional and non-functional water points in attribute data.\n\n6.1 Extracting Functional Water Points\nDplyr’s function filter() is used to classify functional water points and proportion is plotted after filtering.\n\nfunctional <- nigeria_2 %>%\n  filter(status_clean %in% c(\"Functional\",\n                             \"Functional but needs repair\",\n                             \"Functional but not in use\"))\nfreq(data=functional, \n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\n6.2 Extracting Non-functional Water Points\nLikewise, non-functional water points are extracted by using the following texts in status_clean field.\n\nNon_functional <- nigeria_2 %>%\n  filter(status_clean %in% c(\"Non-Functional\",\n                             \"Non-Functional due to dry season\",\n                             \"Non functional but not in use\",\n                             \"Abandoned/Decommissioned\",\n                             \"Abandoned\"))\nfreq(data=Non_functional, \n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.27           91.27\n2 Non-Functional due to dry season      2403       7.46           98.73\n3         Abandoned/Decommissioned       234       0.73           99.46\n4                        Abandoned       175       0.54          100.00\n\n\n\n\n6.3 Extracting Unknown Status Water Point\nLastly, the following code chunk is used to extract unknown status.\n\nUnknown <- nigeria_2 %>%\n  filter(status_clean == \"Unknown\")"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#performing-point-in-polygon-count",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#performing-point-in-polygon-count",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "7 Performing Point In Polygon Count",
    "text": "7 Performing Point In Polygon Count\nThe following code chunk is used to calculate how many total, functional, non-functional and unknown water points are present in each polygon.\n\nnigeria_1 <- nigeria_1 %>% \n  mutate(`total_wpt` = lengths(\n    st_intersects(nigeria_1, nigeria_2))) %>%\n  mutate(`wpt_functional` = lengths(\n    st_intersects(nigeria_1, functional))) %>%\n  mutate(`wpt_non-functional` = lengths(\n    st_intersects(nigeria_1, Non_functional))) %>%\n  mutate(`wpt_unknown` = lengths(\n    st_intersects(nigeria_1, Unknown)))"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#saving-analytical-data",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#saving-analytical-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "8 Saving Analytical Data",
    "text": "8 Saving Analytical Data\nAfterwards, percentage of functional and non-functional water points in each polygon are computed by dividing with total water points.\n\nnigeria_1 <- nigeria_1 %>%\n  mutate(pct_functional = `wpt_functional`/`total_wpt`) %>%\n  mutate(`pct_non-functional` = `wpt_non-functional`/`total_wpt`) \n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional\n\n\nwrite_rds(nigeria_1, \"nigeria_1.rds\")"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#visualizing-spatial-distribution-of-water-points",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#visualizing-spatial-distribution-of-water-points",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "9 Visualizing Spatial Distribution of Water Points",
    "text": "9 Visualizing Spatial Distribution of Water Points\n\nnigeria_1 <- read_rds(\"nigeria_1.rds\")\n\ntotal <- qtm(nigeria_1, \"total_wpt\")+\n         tm_layout(legend.height=0.35,\n         legend.width=0.45)\nwp_functional <- qtm(nigeria_1, \"wpt_functional\")+\n                 tm_layout(legend.height=0.35,\n                 legend.width=0.45)\nwp_nonfunctional <- qtm(nigeria_1, \"wpt_non-functional\")+\n                    tm_layout(legend.height=0.35,\n                    legend.width=0.45)\nunknown <- qtm(nigeria_1, \"wpt_unknown\")+\n           tm_layout(legend.height=0.35,\n           legend.width=0.45)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown,asp=0, ncol=2)"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#visualizing-spatial-distribution-of-water-points-1",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#visualizing-spatial-distribution-of-water-points-1",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "10 Visualizing Spatial Distribution of Water Points %",
    "text": "10 Visualizing Spatial Distribution of Water Points %\n\npct_functional <- qtm(nigeria_1, \"pct_functional\")+\n         tm_layout(main.title=\"Functional Water Points (%)\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\npct_non <- qtm(nigeria_1,\"pct_non-functional\")+\n                 tm_layout(main.title=\"Non-Functional Water Points (%)\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\n\ntmap_arrange(pct_functional,pct_non,asp=1, ncol=2)\n\n\n\n\nInterestingly, after plotting the above, it can be observed that there are missing values for percentage attributes.\nIt will be further analyzed in detail in the code chunk below.\n\nnigeria_1[is.nan(nigeria_1$`pct_non-functional`) ,]\n\nSimple feature collection with 13 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8.553504 ymin: 4.798471 xmax: 14.67882 ymax: 13.71406\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     shapeName Level                    shapeID shapeGroup shapeType\n3       Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n86     Bakassi  ADM2 NGA-ADM2-72505758B25708171        NGA      ADM2\n241     Geidam  ADM2 NGA-ADM2-72505758B79155077        NGA      ADM2\n250      Gubio  ADM2 NGA-ADM2-72505758B10682130        NGA      ADM2\n252      Gujba  ADM2 NGA-ADM2-72505758B96685701        NGA      ADM2\n261   Guzamala  ADM2 NGA-ADM2-72505758B23727233        NGA      ADM2\n400       Kaga  ADM2 NGA-ADM2-72505758B72996990        NGA      ADM2\n406 Kala/Balge  ADM2 NGA-ADM2-72505758B70998471        NGA      ADM2\n447     Kukawa  ADM2  NGA-ADM2-72505758B5578796        NGA      ADM2\n473   Madagali  ADM2  NGA-ADM2-72505758B2628120        NGA      ADM2\n                          geometry total_wpt wpt_functional wpt_non-functional\n3   MULTIPOLYGON (((13.83477 13...         0              0                  0\n86  MULTIPOLYGON (((8.580903 4....         0              0                  0\n241 MULTIPOLYGON (((11.7352 12....         0              0                  0\n250 MULTIPOLYGON (((12.4339 12....         0              0                  0\n252 MULTIPOLYGON (((12.14603 11...         0              0                  0\n261 MULTIPOLYGON (((13.12014 13...         0              0                  0\n400 MULTIPOLYGON (((12.17825 11...         0              0                  0\n406 MULTIPOLYGON (((14.58302 11...         0              0                  0\n447 MULTIPOLYGON (((13.28982 13...         0              0                  0\n473 MULTIPOLYGON (((13.32295 10...         0              0                  0\n    wpt_unknown pct_functional pct_non-functional\n3             0            NaN                NaN\n86            0            NaN                NaN\n241           0            NaN                NaN\n250           0            NaN                NaN\n252           0            NaN                NaN\n261           0            NaN                NaN\n400           0            NaN                NaN\n406           0            NaN                NaN\n447           0            NaN                NaN\n473           0            NaN                NaN\n\n\nThings to note from result above:\nThere are 13 rows that has no water point in their corresponding polygons, therefore giving rise to NaN values in percentage fields.\nNaN values in pct_non-functional field will be recoded as 0 in the code chunk below for easier analysis.\n\nnigeria_1[\"pct_non-functional\"][is.na(nigeria_1[\"pct_non-functional\"])] <- 0"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#computation-of-spatial-weight-matrix",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#computation-of-spatial-weight-matrix",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "11 Computation of Spatial Weight Matrix",
    "text": "11 Computation of Spatial Weight Matrix\nWeight matrix can be computed in various methods. Firstly, queen contiguity based weight is computed below.\n\nwm <- poly2nb(nigeria_1, \n              queen=TRUE)\nwm\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\n\nIn above summary, it is observed that there is a region with no neighbor when using contiguity method. Furthermore, there is a wide range of polygon sizes across Nigeria map. Hence, fixed distance or adaptive distance weights are more suitable choices for this analysis.\nTo use distanced based weight matrix, we need to transform coordinate system to projected coordinate system by using st_transform() and setting crs as 26391 for nigeria. Afterwards, we will compute coordinates of polygons’ centroids.\n\nnigeria <- st_transform(nigeria_1,crs=26391)\nnigeria\n\nSimple feature collection with 774 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28879.72 ymin: 30292.37 xmax: 1343798 ymax: 1094244\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n        shapeName Level                    shapeID shapeGroup shapeType\n1       Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2       Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3          Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n4           Abaji  ADM2 NGA-ADM2-72505758B61968000        NGA      ADM2\n5            Abak  ADM2 NGA-ADM2-72505758B39432389        NGA      ADM2\n6       Abakaliki  ADM2 NGA-ADM2-72505758B36739173        NGA      ADM2\n7  Abeokuta North  ADM2 NGA-ADM2-72505758B86358915        NGA      ADM2\n8  Abeokuta South  ADM2 NGA-ADM2-72505758B56925175        NGA      ADM2\n9             Abi  ADM2  NGA-ADM2-72505758B1616690        NGA      ADM2\n10    Aboh-Mbaise  ADM2 NGA-ADM2-72505758B78555816        NGA      ADM2\n                         geometry total_wpt wpt_functional wpt_non-functional\n1  MULTIPOLYGON (((552560.3 12...        17              7                  9\n2  MULTIPOLYGON (((545153.6 12...        71             29                 35\n3  MULTIPOLYGON (((1245549 106...         0              0                  0\n4  MULTIPOLYGON (((510602.3 57...        57             23                 34\n5  MULTIPOLYGON (((598086 1218...        48             23                 25\n6  MULTIPOLYGON (((663801.7 25...       233             82                 42\n7  MULTIPOLYGON (((81132.88 37...        34             16                 15\n8  MULTIPOLYGON (((98464.54 34...       119             72                 33\n9  MULTIPOLYGON (((635478 2187...       152             79                 62\n10 MULTIPOLYGON (((543608.8 15...        66             18                 26\n   wpt_unknown pct_functional pct_non-functional\n1            1      0.4117647          0.5294118\n2            7      0.4084507          0.4929577\n3            0            NaN          0.0000000\n4            0      0.4035088          0.5964912\n5            0      0.4791667          0.5208333\n6          109      0.3519313          0.1802575\n7            3      0.4705882          0.4411765\n8           14      0.6050420          0.2773109\n9           11      0.5197368          0.4078947\n10          22      0.2727273          0.3939394\n\n\n\nlongitude <- map_dbl(nigeria$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nigeria$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude  latitude\n[1,]  549364.0  123694.9\n[2,]  547123.4  120376.5\n[3,] 1189496.9 1059770.9\n[4,]  489057.4  534262.6\n[5,]  593718.2  113824.1\n[6,]  642618.7  251222.3\n\n\nThe following code chunk is used to determine the maximum distance of nearest neighbors.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nTo ensure each polygon has at least one neighbor, upper limit distance is set at 72200 which is slightly higher than maximum distance.\n\nwm_fixed <- dnearneigh(coords, 0, 72200)\nsummary(wm_fixed)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18158 \nPercentage nonzero weights: 3.031001 \nAverage number of links: 23.45995 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9 11 22 31 35 33 35 29 35 27 18 20 24 15 13 11 12 14 18 17 10 12 11  4 15 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  5 14 14 12  7 10  8 11  6 12 16 15  9  8  6  4  4  6  7 10  9  4  6  4  2 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 2  4  5  4  5  6  2  4  6  7  7  5  5  3  1  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 70 links\n\n\nPlot of fixed distance based neighbors is displayed below.\n\nplot(nigeria$geometry, border=\"lightgrey\")\nplot(wm_fixed, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\ntitle(main = \"Fixed Distance Based Neighbors Plot\")\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural counties) tend to have lesser neighbors. Having many neighbors smoothes the neighbor relationship across more neighbors.\nTo control the number of neighbors, k=number of neighbors can be passed when creating list object as shown below.\n\nknn8 <- knn2nb(knearneigh(coords, k=8))\nknn8\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nPlot of 8 k-nearest neighbors weight matrix is displayed below.\n\nplot(nigeria$geometry, border=\"lightgrey\")\nplot(knn8, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\ntitle(main = \"Adaptive Distance Based Neighbors Plot\")\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm <- nb2listw(knn8, \n                style=\"W\",zero.policy=TRUE)"
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#global-spatial-autocorrelation",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#global-spatial-autocorrelation",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "12 Global Spatial Autocorrelation",
    "text": "12 Global Spatial Autocorrelation\n\n12.1 Global Spatial Autocorrelation : Moran’s I\nGlobal Moran’s I is a statistical test that indicates spatial and attribute similarity. Under randomization, Moran’s I value is approximately zero. Therefore, positive Moran’s I value is interpreted as attribute similarity pattern (positive spatial autocorrelation) across the map while negative Moran’s I value shows checker board pattern (alternate low and high) across the map.\n\nmoran.test(nigeria$`pct_non-functional`, \n           listw=rswm, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nigeria$`pct_non-functional`  \nweights: rswm    \n\nMoran I statistic standard deviate = 27.279, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4613397182     -0.0012936611      0.0002876103 \n\n\n\nset.seed(1234)\nbperm= moran.mc(nigeria$`pct_non-functional`, \n                listw=rswm, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nigeria$`pct_non-functional` \nweights: rswm  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46134, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n12.2 Global Spatial Autocorrelation : Geary’s C\nGeary’s C computation is different from Moran’s I in such a way that Geary’s C value that is bigger than expected value (1 under randomization) indicates dissimilarity whereas the value below 1 indicates similarity with its neighbors.\n\ngeary.test(nigeria$`pct_non-functional`, listw=rswm,zero.policy=TRUE)\n\n\n    Geary C test under randomisation\n\ndata:  nigeria$`pct_non-functional` \nweights: rswm \n\nGeary C statistic standard deviate = 26.276, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.5259474612      1.0000000000      0.0003254806 \n\n\nAs seen from the geary’s C test, the statistic also indicate positive autocorrelation on a global scale."
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#cluster-and-outlier-analysis",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#cluster-and-outlier-analysis",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "13 Cluster and Outlier Analysis",
    "text": "13 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. Local Moran’s I is one of the most popular method to use to explore existence of clusters on a local scale. Local’s Moran I value of each polygon is interpreted by checking whether it is a positive value or a negative value. Positive local moran’s value of a polygon indicates formation of cluster (high-high or low-low for itself and its neighbors). Negative value ,on the other hand, indicates outliers meaning that the attribute values of the polygon and its neighbors exist on either side of mean value.\nLocal moran’s I can be computed by using the code chunk below.\n\nfips <- order(nigeria$shapeName)\nlocalMI <- localmoran(nigeria$`pct_non-functional`, rswm,zero.policy=TRUE)\nhead(localMI)\n\n         Ii          E.Ii     Var.Ii      Z.Ii Pr(z != E(Ii))\n1 0.6789154 -0.0008519201 0.08160633 2.3795692   1.733289e-02\n2 0.6234672 -0.0005263197 0.05043315 2.7785743   5.459802e-03\n3 2.9257200 -0.0037848901 0.36149434 4.8724061   1.102472e-06\n4 0.2186541 -0.0016549463 0.15840164 0.5535444   5.798907e-01\n5 0.8962642 -0.0007682791 0.07360042 3.3064962   9.447063e-04\n6 0.5740935 -0.0009385788 0.08989966 1.9178431   5.513091e-02\n\n\nShape name will be displayed alongside local Moran’s statistics by using the code below.\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=nigeria$shapeName[fips]),\n  check.names=FALSE,\n  )\n\n                            Ii        E.Ii      Var.Ii        Z.Ii\nAba North           6.7892e-01 -8.5192e-04  8.1606e-02  2.3796e+00\nAba South           6.2347e-01 -5.2632e-04  5.0433e-02  2.7786e+00\nAbadam              2.9257e+00 -3.7849e-03  3.6149e-01  4.8724e+00\nAbaji               2.1865e-01 -1.6549e-03  1.5840e-01  5.5354e-01\nAbak                8.9626e-01 -7.6828e-04  7.3600e-02  3.3065e+00\nAbakaliki           5.7409e-01 -9.3858e-04  8.9900e-02  1.9178e+00\nAbeokuta North     -1.6022e-01 -1.9795e-04  1.8974e-02 -1.1617e+00\nAbeokuta South      1.3874e-01 -1.9620e-04  1.8807e-02  1.0132e+00\nAbi                -3.5169e-02 -7.0007e-05  6.7113e-03 -4.2844e-01\nAboh-Mbaise         1.0170e-02 -3.5711e-05  3.4236e-03  1.7441e-01\nAbua/Odual         -5.8581e-03 -1.9433e-05  1.8631e-03 -1.3527e-01\nAbuja Municipal    -9.0394e-03 -9.6900e-04  9.2811e-02 -2.6491e-02\nAdavi               8.7425e-01 -1.1335e-03  1.0855e-01  2.6570e+00\nAdo                 6.5003e-02 -1.7775e-04  1.7038e-02  4.9935e-01\nAdo-Odo/Ota        -2.1226e-01 -1.0738e-04  1.0294e-02 -2.0911e+00\nAdo Ekiti          -5.6126e-02 -1.5598e-04  1.4952e-02 -4.5773e-01\nAfijio              2.3711e-02 -2.9388e-06  2.8175e-04  1.4128e+00\nAfikpo North       -3.3345e-03 -8.8537e-05  8.4875e-03 -3.5234e-02\nAfikpo South       -1.7193e-01 -5.8314e-04  5.5875e-02 -7.2488e-01\nAgaie              -3.5249e-02 -5.3950e-04  5.1695e-02 -1.5266e-01\nAgatu               1.9326e+00 -2.7778e-03  2.6558e-01  3.7555e+00\nAgege               1.4231e+00 -2.5099e-03  2.4003e-01  2.9098e+00\nAguata              5.9881e-01 -1.1880e-03  1.1376e-01  1.7789e+00\nAgwara              1.6703e-01 -9.4938e-05  9.1011e-03  1.7519e+00\nAhiazu-Mbaise       7.2846e-02 -1.3417e-04  1.2862e-02  6.4351e-01\nAhoada East        -5.6799e-01 -8.2124e-04  7.8669e-02 -2.0221e+00\nAhoada West        -3.0991e-01 -3.7849e-03  3.6149e-01 -5.0915e-01\nAiyedade            5.3356e-02 -3.6665e-05  3.5151e-03  9.0057e-01\nAiyedire            5.0529e-02 -3.2647e-05  3.1298e-03  9.0378e-01\nAiyekire (Gbonyin)  9.2862e-03 -3.0691e-06  2.9424e-04  5.4154e-01\nAjaokuta            1.2351e+00 -1.7042e-03  1.6311e-01  3.0623e+00\nAjeromi-Ifelodun    1.2341e+00 -1.6083e-03  1.5395e-01  3.1493e+00\nAjingi              8.1249e-01 -9.0827e-04  8.6999e-02  2.7577e+00\nAkamkpa             4.8317e-02 -8.4227e-06  8.0750e-04  1.7006e+00\nAkinyele            3.4776e-02 -9.8096e-06  9.4047e-04  1.1343e+00\nAkko                5.0465e-01 -1.3648e-03  1.3067e-01  1.3998e+00\nAkoko-Edo           6.9639e-01 -8.8063e-04  8.4354e-02  2.4008e+00\nAkoko North East    3.0564e-01 -8.4416e-04  8.0864e-02  1.0778e+00\nAkoko North West    2.7762e-01 -1.6170e-03  1.5477e-01  7.0980e-01\nAkoko South East    6.0714e-01 -3.0142e-03  2.8811e-01  1.1367e+00\nAkoko South West    7.1432e-02 -1.0000e-03  9.5777e-02  2.3404e-01\nAkpabuyo            6.8192e-01 -8.3136e-04  7.9639e-02  2.4194e+00\nAkuku Toru          1.0173e-01 -1.5794e-04  1.5140e-02  8.2806e-01\nAkure North         1.1739e-01 -1.3622e-03  1.3042e-01  3.2884e-01\nAkure South        -7.6626e-01 -1.4958e-03  1.4320e-01 -2.0210e+00\nAkwanga            -1.2842e-01 -4.2396e-04  4.0629e-02 -6.3499e-01\nAlbasu              2.7858e-01 -9.7711e-05  9.3669e-03  2.8794e+00\nAleiro              1.7576e-01 -1.4184e-04  1.3597e-02  1.5085e+00\nAlimosho            7.0298e-01 -5.2520e-04  5.0326e-02  3.1360e+00\nAlkaleri           -1.1207e-01 -1.3334e-04  1.2782e-02 -9.9010e-01\nAmuwo-Odofin        8.0321e-01 -7.4276e-04  7.1157e-02  3.0138e+00\nAnambra East        4.1552e-01 -4.7483e-04  4.5502e-02  1.9502e+00\nAnambra West        3.8053e-02 -5.7475e-05  5.5100e-03  5.1341e-01\nAnaocha             6.8839e-01 -8.2150e-04  7.8695e-02  2.4568e+00\nAndoni              4.7375e-01 -2.4350e-03  2.3288e-01  9.8676e-01\nAninri              6.3469e-01 -3.7849e-03  3.6149e-01  1.0619e+00\nAniocha North       9.0257e-01 -6.6034e-03  6.2891e-01  1.1464e+00\nAniocha South       1.8668e-02 -7.7469e-05  7.4265e-03  2.1753e-01\nAnka                6.8828e-02 -4.1616e-04  3.9882e-02  3.4674e-01\nAnkpa               2.3264e+00 -4.7018e-03  4.4865e-01  3.4802e+00\nApa                 1.8920e+00 -1.9288e-03  1.8456e-01  4.4086e+00\nApapa               1.7658e+00 -3.7849e-03  3.6149e-01  2.9432e+00\nArdo-Kola           7.1375e-03 -6.2839e-05  6.0242e-03  9.2769e-02\nArewa-Dandi         2.1309e-03 -2.5840e-08  2.4774e-06  1.3539e+00\nArgungu             1.2887e-01 -3.0829e-04  2.9548e-02  7.5147e-01\nArochukwu          -2.3009e-01 -1.8351e-04  1.7590e-02 -1.7335e+00\nAsa                -6.4502e-02 -9.2871e-05  8.9030e-03 -6.8263e-01\nAsari-Toru          6.6861e-01 -1.2962e-03  1.2411e-01  1.9016e+00\nAskira/Uba         -9.4916e-02 -7.9555e-04  7.6211e-02 -3.4094e-01\nAtakumosa East      1.4934e-01 -8.4010e-05  8.0536e-03  1.6650e+00\nAtakumosa West      6.9263e-02 -1.0441e-04  1.0009e-02  6.9335e-01\nAtiba               1.5140e-01 -2.9435e-04  2.8212e-02  9.0315e-01\nAtigbo             -1.8658e-01 -2.7222e-04  2.6092e-02 -1.1534e+00\nAugie               1.8536e-01 -2.3097e-04  2.2139e-02  1.2474e+00\nAuyo                1.3216e+00 -1.9593e-03  1.8748e-01  3.0568e+00\nAwe                 1.0495e-01 -1.4818e-04  1.4204e-02  8.8181e-01\nAwgu                1.6390e-01 -7.7469e-05  7.4265e-03  1.9027e+00\nAwka North          3.3665e-01 -3.7849e-03  3.6149e-01  5.6621e-01\nAwka South          3.6091e-01 -5.2762e-04  5.0558e-02  1.6074e+00\nAyamelum           -3.4206e-01 -1.3785e-03  1.3198e-01 -9.3777e-01\nBabura              7.4368e-01 -1.1769e-03  1.1270e-01  2.2187e+00\nBadagry            -3.7187e-01 -4.3617e-04  4.1799e-02 -1.8168e+00\nBade                8.2284e-01 -7.7865e-04  7.4593e-02  3.0156e+00\nBagudo             -1.6464e-01 -2.4629e-05  2.3612e-03 -3.3877e+00\nBagwai              8.5997e-01 -1.0336e-03  9.8988e-02  2.7366e+00\nBakassi            -1.9921e+00 -3.7849e-03  3.6149e-01 -3.3070e+00\nBakori              4.9255e-01 -2.2358e-03  2.1387e-01  1.0699e+00\nBakura              1.0044e-01 -2.1293e-03  2.0371e-01  2.2726e-01\nBalanga            -1.6459e-01 -1.9956e-04  1.9128e-02 -1.1886e+00\nBali                8.0925e-03 -1.1908e-04  1.1415e-02  7.6858e-02\nBama                2.6778e+00 -3.7849e-03  3.6149e-01  4.4600e+00\nBarikin Ladi        1.1400e-02 -3.3171e-06  3.1802e-04  6.3942e-01\nBaruten             3.8950e-02 -1.4682e-04  1.4074e-02  3.2956e-01\nBassa               1.4629e+00 -1.5293e-03  1.4640e-01  3.8274e+00\nBassa1              1.2614e-01 -3.4119e-04  3.2700e-02  6.9943e-01\nBatagarawa         -1.4586e-02 -2.6866e-05  2.5756e-03 -2.8688e-01\nBatsari             3.7215e-02 -3.4060e-05  3.2654e-03  6.5186e-01\nBauchi              4.7263e-01 -6.8373e-04  6.5506e-02  1.8493e+00\nBaure              -9.3729e-02 -2.3253e-05  2.2292e-03 -1.9847e+00\nBayo               -5.0392e-02 -1.3334e-04  1.2782e-02 -4.4454e-01\nBebeji              8.0730e-01 -1.8246e-03  1.7461e-01  1.9363e+00\nBekwara            -2.4575e-02 -1.4491e-04  1.3891e-02 -2.0728e-01\nBende              -2.3029e-02 -3.4919e-04  3.3466e-02 -1.2397e-01\nBiase               2.0709e-01 -2.0560e-04  1.9707e-02  1.4766e+00\nBichi               2.6289e-01 -7.7469e-05  7.4265e-03  3.0515e+00\nBida               -3.1094e-01 -1.6155e-03  1.5463e-01 -7.8662e-01\nBilliri             1.0781e-01 -9.0246e-04  8.6443e-02  3.6977e-01\nBindawa             3.3102e-01 -7.8469e-04  7.5171e-02  1.2102e+00\nBinji               3.5427e-01 -2.1370e-03  2.0445e-01  7.8823e-01\nBiriniwa            9.0755e-01 -1.0626e-03  1.0176e-01  2.8483e+00\nBirni Kudu          1.0370e+00 -1.8664e-03  1.7861e-01  2.4583e+00\nBirnin-Gwari        6.6308e-01 -3.4244e-03  3.2719e-01  1.1652e+00\nBirnin Kebbi       -7.1690e-01 -1.4958e-03  1.4320e-01 -1.8905e+00\nBirnin Magaji       4.0771e-01 -5.9670e-04  5.7173e-02  1.7076e+00\nBiu                 1.4693e+00 -3.7849e-03  3.6149e-01  2.4501e+00\nBodinga            -3.7581e-02 -4.2649e-04  4.0871e-02 -1.8378e-01\nBogoro              4.6669e-01 -6.5513e-04  6.2768e-02  1.8654e+00\nBoki               -9.3332e-04 -6.7819e-08  6.5020e-06 -3.6600e-01\nBokkos             -2.0073e-02 -3.4919e-04  3.3466e-02 -1.0782e-01\nBoluwaduro          7.6330e-02 -3.8656e-05  3.7059e-03  1.2545e+00\nBomadi              2.0653e+00 -4.4867e-03  4.2823e-01  3.1629e+00\nBonny               3.0883e-01 -3.7849e-03  3.6149e-01  5.1995e-01\nBorgu              -4.0164e-01 -4.7784e-04  4.5790e-02 -1.8747e+00\nBoripe              2.2016e-01 -4.3099e-04  4.1302e-02  1.0854e+00\nBosso              -1.4550e-02 -5.8379e-04  5.5937e-02 -5.9052e-02\nBrass               9.8065e-01 -3.9802e-03  3.8008e-01  1.5971e+00\nBuji                1.0148e+00 -1.6136e-03  1.5445e-01  2.5864e+00\nBukkuyum            3.8494e-02 -1.9397e-04  1.8592e-02  2.8373e-01\nBungudu             9.6500e-02 -5.8858e-05  5.6426e-03  1.2854e+00\nBunkure             3.9302e-01 -4.4300e-04  4.2453e-02  1.9096e+00\nBunza               7.6036e-01 -1.3904e-03  1.3311e-01  2.0878e+00\nBursari             9.0091e-01 -8.8367e-04  8.4645e-02  3.0996e+00\nBuruku             -8.4263e-03 -4.3890e-05  4.2076e-03 -1.2923e-01\nBurutu              4.4268e-01 -1.4184e-04  1.3597e-02  3.7976e+00\nBwari               2.8730e-02 -5.1512e-04  4.9360e-02  1.3163e-01\nCalabar-Municipal  -1.8069e-01 -5.1758e-05  4.9619e-03 -2.5644e+00\nCalabar South       1.0993e+00 -2.6153e-03  2.5008e-01  2.2034e+00\nChanchaga          -7.5975e-03 -1.1335e-03  1.0855e-01 -1.9620e-02\nCharanchi           2.5287e-01 -3.5736e-04  3.4249e-02  1.3683e+00\nChibok              5.8966e-01 -3.9938e-04  3.8275e-02  3.0161e+00\nChikun              1.0710e+00 -1.2060e-02  1.1423e+00  1.0134e+00\nDala               -1.0947e-01 -1.8343e-05  1.7585e-03 -2.6101e+00\nDamaturu            1.5606e+00 -2.3369e-03  2.2352e-01  3.3058e+00\nDamban             -4.2715e-01 -2.0238e-03  1.9364e-01 -9.6610e-01\nDambatta            2.1897e-02 -5.6372e-07  5.4045e-05  2.9787e+00\nDamboa              2.4501e+00 -3.7849e-03  3.6149e-01  4.0814e+00\nDan Musa            8.5758e-01 -1.8302e-03  1.7515e-01  2.0535e+00\nDandi               1.2838e+00 -3.4734e-03  3.3185e-01  2.2347e+00\nDandume             4.0985e-03 -6.4750e-06  6.2077e-04  1.6476e-01\nDange-Shuni        -1.8104e-02 -2.7397e-05  2.6265e-03 -3.5272e-01\nDanja              -9.3987e-03 -2.1402e-04  2.0514e-02 -6.4126e-02\nDarazo              1.4584e-01 -5.8314e-04  5.5875e-02  6.1943e-01\nDass                8.8954e-01 -2.3926e-03  2.2884e-01  1.8645e+00\nDaura              -1.7522e-01 -4.4265e-03  4.2251e-01 -2.6275e-01\nDawakin Kudu        1.3644e-01 -1.0740e-04  1.0295e-02  1.3458e+00\nDawakin Tofa        9.6148e-01 -2.6974e-03  2.5790e-01  1.8986e+00\nDegema              5.8454e-01 -3.4919e-04  3.3466e-02  3.1972e+00\nDekina              1.7648e+00 -3.0748e-03  2.9388e-01  3.2610e+00\nDemsa               3.2421e-01 -4.8319e-04  4.6302e-02  1.5089e+00\nDikwa               2.6778e+00 -3.7849e-03  3.6149e-01  4.4600e+00\nDoguwa             -1.3645e-01 -7.3478e-05  7.0441e-03 -1.6249e+00\nDoma                1.3346e-01 -2.1883e-05  2.0979e-03  2.9144e+00\nDonga               7.7152e-02 -2.3562e-04  2.2584e-02  5.1496e-01\nDukku               1.2516e+00 -7.1607e-03  6.8160e-01  1.5246e+00\nDunukofia           1.3329e-02 -3.6091e-07  3.4602e-05  2.2661e+00\nDutse               1.4633e+00 -3.5160e-03  3.3591e-01  2.5308e+00\nDutsi              -1.2041e-02 -1.3649e-05  1.3085e-03 -3.3250e-01\nDutsin-Ma           5.5020e-01 -5.9391e-04  5.6906e-02  2.3089e+00\nEastern Obolo       2.3724e+00 -6.7904e-03  6.4659e-01  2.9588e+00\nEbonyi              7.2285e-01 -1.2363e-03  1.1838e-01  2.1045e+00\nEdati               3.9363e-02 -2.2604e-04  2.1666e-02  2.6896e-01\nEde North          -1.5542e-01 -4.7784e-04  4.5790e-02 -7.2406e-01\nEde South          -4.2037e-02 -2.4815e-04  2.3785e-02 -2.7096e-01\nEdu                 1.0724e-01 -6.4958e-04  6.2237e-02  4.3247e-01\nEfon                2.1532e-01 -6.7871e-04  6.5026e-02  8.4706e-01\nEgbado North       -7.2892e-02 -1.7295e-05  1.6580e-03 -1.7897e+00\nEgbado South        2.9782e-01 -2.5819e-03  2.4690e-01  6.0456e-01\nEgbeda              8.2926e-03 -2.1443e-06  2.0557e-04  5.7852e-01\nEgbedore            4.2595e-02 -7.6016e-05  7.2873e-03  4.9986e-01\nEgor                6.0463e-01 -7.5313e-04  7.2151e-02  2.2538e+00\nEhime-Mbano         2.6306e-01 -4.9843e-04  4.7762e-02  1.2060e+00\nEjigbo              6.2663e-02 -2.1410e-04  2.0522e-02  4.3892e-01\nEkeremor            2.1979e+00 -7.9298e-03  7.5423e-01  2.5400e+00\nEket                6.9441e-01 -2.7520e-04  2.6377e-02  4.2774e+00\nEkiti               4.3960e-01 -1.6902e-03  1.6177e-01  1.0972e+00\nEkiti East         -7.0851e-01 -2.9059e-03  2.7779e-01 -1.3388e+00\nEkiti South West    2.1953e-01 -4.3996e-04  4.2162e-02  1.0713e+00\nEkiti West         -3.1506e-03 -2.1887e-06  2.0984e-04 -2.1734e-01\nEkwusigo            1.3433e+00 -2.2319e-03  2.1350e-01  2.9119e+00\nEleme               5.0052e-01 -3.7849e-03  3.6149e-01  8.3877e-01\nEmohua              6.3099e-02 -1.9433e-05  1.8631e-03  1.4623e+00\nEmure              -1.6629e-01 -1.9807e-04  1.8985e-02 -1.2054e+00\nEnugu East          4.4662e-01 -1.0064e-03  9.6386e-02  1.4418e+00\nEnugu North         1.0370e+00 -2.9574e-03  2.8270e-01  1.9560e+00\nEnugu South         1.0774e+00 -2.7566e-03  2.6356e-01  2.1039e+00\nEpe                -1.1674e-01 -7.8063e-05  7.4835e-03 -1.3486e+00\nEsan Central        1.4559e+00 -2.0762e-03  1.9864e-01  3.2713e+00\nEsan North East     1.5349e+00 -1.5419e-03  1.4759e-01  3.9994e+00\nEsan South East     1.7774e+00 -3.7044e-03  3.5384e-01  2.9943e+00\nEsan West           9.0162e-01 -8.5192e-04  8.1606e-02  3.1592e+00\nEse-Odo             1.4237e+00 -2.3111e-03  2.2106e-01  3.0329e+00\nEsit - Eket         2.7088e+00 -4.4867e-03  4.2823e-01  4.1463e+00\nEssien Udim         2.3101e+00 -2.8826e-03  2.7556e-01  4.4062e+00\nEtche               6.7156e-03 -3.8570e-04  3.6964e-02  3.6936e-02\nEthiope East        1.2709e+00 -2.2575e-03  2.1594e-01  2.7398e+00\nEthiope West        1.5819e+00 -3.0238e-03  2.8903e-01  2.9480e+00\nEti-Osa             1.7559e+00 -3.7849e-03  3.6149e-01  2.9268e+00\nEtim Ekpo           2.2998e+00 -2.4350e-03  2.3288e-01  4.7707e+00\nEtinan              2.5189e+00 -4.9921e-03  4.7622e-01  3.6573e+00\nEtsako Central      1.2637e+00 -1.7637e-03  1.6879e-01  3.0801e+00\nEtsako East         7.6136e-01 -1.0438e-03  9.9964e-02  2.4114e+00\nEtsako West        -1.3044e-01 -1.9433e-05  1.8631e-03 -3.0215e+00\nEtung              -7.4039e-02 -6.6079e-04  6.3310e-02 -2.9163e-01\nEwekoro             3.1870e-01 -9.3545e-04  8.9600e-02  1.0678e+00\nEzeagu              4.6183e-01 -7.7983e-04  7.4706e-02  1.6925e+00\nEzinihitte         -1.6352e-02 -1.1481e-05  1.1007e-03 -4.9252e-01\nEzza North          6.2916e-01 -7.6342e-04  7.3136e-02  2.3293e+00\nEzza South          3.3178e-01 -8.2837e-04  7.9352e-02  1.1807e+00\nFagge               9.8636e-01 -2.5647e-03  2.4525e-01  1.9969e+00\nFakai              -6.2304e-01 -9.2227e-04  8.8339e-02 -2.0931e+00\nFaskari             7.6346e-02 -4.9672e-04  4.7598e-02  3.5222e-01\nFika               -2.0575e-01 -6.4770e-04  6.2057e-02 -8.2335e-01\nFufore              7.0348e-01 -3.7849e-03  3.6149e-01  1.1763e+00\nFunakaye            7.8873e-01 -1.4882e-03  1.4246e-01  2.0936e+00\nFune                3.5195e-01 -2.4555e-04  2.3536e-02  2.2957e+00\nFuntua             -6.9384e-02 -3.9643e-04  3.7991e-02 -3.5394e-01\nGabasawa            1.2220e+00 -3.2538e-03  3.1093e-01  2.1974e+00\nGada               -7.8939e-03 -2.8754e-07  2.7567e-05 -1.5034e+00\nGagarawa            1.2838e+00 -2.3829e-03  2.2791e-01  2.6942e+00\nGamawa              8.3599e-02 -2.1773e-05  2.0874e-03  1.8303e+00\nGanjuwa             4.1907e-01 -1.4633e-03  1.4009e-01  1.1236e+00\nGanye               7.8563e-04 -1.0810e-07  1.0364e-05  2.4407e-01\nGarki               7.9470e-01 -7.3415e-04  7.0334e-02  2.9993e+00\nGarko               7.3490e-01 -1.6277e-03  1.5580e-01  1.8660e+00\nGarum Mallam        3.7981e-01 -2.6639e-04  2.5533e-02  2.3786e+00\nGashaka             1.1109e-02 -3.5711e-05  3.4236e-03  1.9047e-01\nGassol              3.2994e-03 -3.2732e-05  3.1380e-03  5.9483e-02\nGaya                1.1825e+00 -3.4659e-03  3.3113e-01  2.0610e+00\nGbako               2.4767e-02 -1.1948e-04  1.1453e-02  2.3254e-01\nGboko               5.9421e-03 -4.2785e-06  4.1019e-04  2.9360e-01\nGeidam              2.2906e+00 -3.7849e-03  3.6149e-01  3.8160e+00\nGezawa              1.5493e-01 -3.3884e-05  3.2484e-03  2.7190e+00\nGiade               1.3593e-01 -1.3636e-04  1.3071e-02  1.1901e+00\nGirei               6.6812e-01 -1.4958e-03  1.4320e-01  1.7695e+00\nGiwa                5.8783e-01 -9.0753e-04  8.6928e-02  1.9968e+00\nGokana             -3.7403e-01 -5.8314e-04  5.5875e-02 -1.5799e+00\nGombe               7.8483e-01 -1.1519e-03  1.1031e-01  2.3666e+00\nGombi               6.1143e-02 -1.9433e-05  1.8631e-03  1.4170e+00\nGoronyo             1.0582e-01 -2.3644e-03  2.2615e-01  2.2750e-01\nGubio               2.4208e+00 -3.7849e-03  3.6149e-01  4.0326e+00\nGudu                4.5223e-01 -1.3689e-03  1.3106e-01  1.2530e+00\nGujba               1.3074e+00 -3.7849e-03  3.6149e-01  2.1809e+00\nGulani             -1.0620e-01 -5.8314e-04  5.5875e-02 -4.4682e-01\nGuma                2.7932e-01 -7.7336e-04  7.4087e-02  1.0290e+00\nGumel              -1.0383e-01 -1.1195e-05  1.0733e-03 -3.1688e+00\nGummi              -4.8721e-02 -6.1122e-05  5.8596e-03 -6.3568e-01\nGurara             -1.0797e-01 -1.8125e-04  1.7374e-02 -8.1778e-01\nGuri                1.1531e+00 -2.7072e-03  2.5884e-01  2.2718e+00\nGusau               1.1635e-02 -6.8828e-06  6.5987e-04  4.5321e-01\nGuyuk              -4.7739e-01 -5.8314e-04  5.5875e-02 -2.0171e+00\nGuzamala            2.6994e+00 -3.7849e-03  3.6149e-01  4.4960e+00\nGwadabawa           1.3180e-01 -2.2893e-04  2.1943e-02  8.9126e-01\nGwagwalada          6.7777e-02 -1.5705e-04  1.5055e-02  5.5367e-01\nGwale               6.6243e-01 -8.8451e-04  8.4726e-02  2.2788e+00\nGwandu              1.8085e-01 -3.5733e-04  3.4246e-02  9.7919e-01\nGwaram              8.7049e-01 -1.7432e-03  1.6683e-01  2.1355e+00\nGwarzo              8.5625e-01 -1.7000e-03  1.6271e-01  2.1269e+00\nGwer East           4.9037e-01 -1.9843e-03  1.8987e-01  1.1299e+00\nGwer West           1.7738e+00 -7.2831e-03  6.9316e-01  2.1392e+00\nGwiwa               5.7635e-02 -7.9783e-05  7.6484e-03  6.5994e-01\nGwoza               1.4239e+00 -3.7849e-03  3.6149e-01  2.3745e+00\nHadejia            -4.7619e-01 -1.8062e-04  1.7314e-02 -3.6176e+00\nHawul               8.2214e-01 -2.5819e-03  2.4690e-01  1.6598e+00\nHong               -1.9583e-01 -3.4919e-04  3.3466e-02 -1.0686e+00\nIbadan North        1.5007e-01 -1.6608e-03  1.5896e-01  3.8056e-01\nIbadan North East   7.6040e-03 -6.5711e-07  6.2999e-05  9.5810e-01\nIbadan North West   1.6151e-01 -1.5095e-04  1.4469e-02  1.3440e+00\nIbadan South East   2.0681e-01 -1.0867e-03  1.0407e-01  6.4443e-01\nIbadan South West   2.6339e-01 -4.6177e-04  4.4251e-02  1.2543e+00\nIbaji               1.4503e+00 -5.5565e-03  5.2976e-01  2.0003e+00\nIbarapa Central     3.3217e-02 -1.7099e-05  1.6393e-03  8.2085e-01\nIbarapa East        2.5231e-02 -7.4447e-06  7.1374e-04  9.4470e-01\nIbarapa North       5.0350e-02 -1.9433e-05  1.8631e-03  1.1670e+00\nIbeju/Lekki         2.7238e-02 -1.2599e-05  1.2079e-03  7.8409e-01\nIbeno               1.6310e+00 -1.7042e-03  1.6311e-01  4.0426e+00\nIbesikpo Asutan     1.1752e+00 -9.2990e-04  8.9069e-02  3.9408e+00\nIbi                -1.1769e-02 -1.2935e-04  1.2400e-02 -1.0452e-01\nIbiono Ibom         1.6538e+00 -1.8170e-03  1.7388e-01  3.9703e+00\nIdah                1.4103e+00 -2.1094e-03  2.0181e-01  3.1441e+00\nIdanre              8.0640e-01 -8.4627e-04  8.1066e-02  2.8352e+00\nIdeato North        3.4129e-01 -1.3723e-03  1.3138e-01  9.4537e-01\nIdeato South        2.4649e-02 -2.8305e-04  2.7129e-02  1.5137e-01\nIdemili North       8.9175e-01 -2.9733e-03  2.8421e-01  1.6783e+00\nIdemili South       1.3156e+00 -2.4288e-03  2.3229e-01  2.7346e+00\nIdo                 1.4870e-01 -1.7637e-04  1.6906e-02  1.1450e+00\nIdo-Osi            -4.5720e-01 -2.5819e-03  2.4690e-01 -9.1493e-01\nIfako-Ijaye         2.6166e-01 -6.6478e-05  6.3730e-03  3.2785e+00\nIfe Central         1.5599e-01 -1.6677e-03  1.5962e-01  3.9461e-01\nIfe East            2.5002e-01 -7.8748e-04  7.5439e-02  9.1315e-01\nIfe North           1.4309e-01 -1.8273e-04  1.7516e-02  1.0825e+00\nIfe South           2.1000e-01 -7.6510e-05  7.3346e-03  2.4530e+00\nIfedayo             6.0673e-02 -9.7417e-05  9.3387e-03  6.2885e-01\nIfedore             6.7707e-01 -1.7042e-03  1.6311e-01  1.6807e+00\nIfelodun            3.0400e-01 -3.1449e-04  3.0141e-02  1.7528e+00\nIfelodun1           3.5843e-01 -1.7494e-03  1.6743e-01  8.8025e-01\nIfo                 1.0272e+00 -1.6710e-03  1.5994e-01  2.5728e+00\nIgabi               1.2668e+00 -4.1978e-03  4.0076e-01  2.0076e+00\nIgalamela-Odolu     1.6262e-01 -1.4766e-03  1.4136e-01  4.3646e-01\nIgbo-Etiti          5.2820e-01 -2.1882e-04  2.0974e-02  3.6487e+00\nIgbo-Eze North     -5.1867e-02 -2.4288e-03  2.3229e-01 -1.0258e-01\nIgbo-Eze South      4.5841e-01 -2.1533e-03  2.0599e-01  1.0148e+00\nIgueben             1.9957e+00 -5.7078e-03  5.4410e-01  2.7133e+00\nIhiala              4.4388e-01 -5.5655e-04  5.3328e-02  1.9245e+00\nIhitte/Uboma        3.7060e-02 -3.7593e-04  3.6028e-02  1.9723e-01\nIjebu East         -2.6297e-01 -2.5469e-03  2.4356e-01 -5.2769e-01\nIjebu North        -3.7191e-02 -8.7041e-04  8.3376e-02 -1.2579e-01\nIjebu North East   -1.1837e-01 -2.7335e-04  2.6199e-02 -7.2961e-01\nIjebu Ode           3.4018e-02 -2.0322e-04  1.9479e-02  2.4520e-01\nIjero               2.7757e-02 -3.9958e-04  3.8294e-02  1.4388e-01\nIjumu               5.8039e-01 -5.8314e-04  5.5875e-02  2.4578e+00\nIka                 3.0206e+00 -6.6985e-03  6.3790e-01  3.7903e+00\nIka North East     -2.0493e+00 -3.7849e-03  3.6149e-01 -3.4021e+00\nIka South           1.5564e+00 -4.1123e-03  3.9264e-01  2.4905e+00\nIkara               6.6150e-01 -1.6209e-03  1.5515e-01  1.6835e+00\nIkeduru             1.2552e-02 -1.9433e-05  1.8631e-03  2.9125e-01\nIkeja               1.4990e+00 -2.8475e-03  2.7222e-01  2.8784e+00\nIkenne             -4.4525e-02 -6.4770e-04  6.2057e-02 -1.7614e-01\nIkere              -3.7974e-03 -1.1467e-03  1.0981e-01 -7.9988e-03\nIkole              -1.5828e-03 -2.1239e-06  2.0363e-04 -1.1077e-01\nIkom               -7.3737e-02 -1.3896e-04  1.3320e-02 -6.3769e-01\nIkono               1.4637e+00 -1.5293e-03  1.4640e-01  3.8295e+00\nIkorodu             4.1026e-01 -2.7373e-04  2.6236e-02  2.5345e+00\nIkot Abasi          1.4074e+00 -1.2935e-03  1.2385e-01  4.0028e+00\nIkot Ekpene         1.9724e+00 -3.0399e-03  2.9056e-01  3.6647e+00\nIkpoba-Okha         9.3788e-01 -1.1925e-03  1.1419e-01  2.7790e+00\nIkwerre             4.3068e-01 -2.6150e-03  2.5005e-01  8.6650e-01\nIkwo                2.2536e-01 -1.3103e-03  1.2545e-01  6.3997e-01\nIkwuano             1.1348e-01 -5.3796e-05  5.1573e-03  1.5810e+00\nIla                 4.5377e-02 -1.4784e-05  1.4174e-03  1.2057e+00\nIlaje               6.9140e-01 -7.3454e-04  7.0371e-02  2.6091e+00\nIle-Oluji-Okeigbo   1.0427e+00 -2.5655e-03  2.4533e-01  2.1103e+00\nIlejemeji           2.4837e-01 -1.0438e-03  9.9964e-02  7.8887e-01\nIlesha East         8.9098e-02 -5.6361e-05  5.4032e-03  1.2129e+00\nIlesha West         1.6021e-01 -3.2277e-04  3.0935e-02  9.1273e-01\nIllela              1.7329e-01 -1.2838e-03  1.2293e-01  4.9791e-01\nIlorin East        -6.1354e-02 -5.6183e-05  5.3861e-03 -8.3523e-01\nIlorin South        2.5699e-02 -5.3402e-06  5.1198e-04  1.1360e+00\nIlorin West         9.8875e-03 -5.3402e-06  5.1198e-04  4.3722e-01\nImeko-Afon          1.3909e-01 -3.7849e-03  3.6149e-01  2.3763e-01\nIngawa              6.4228e-01 -1.8791e-03  1.7982e-01  1.5190e+00\nIni                 1.1245e+00 -1.8295e-03  1.7507e-01  2.6918e+00\nIpokia             -5.3677e-02 -4.1866e-05  4.0136e-03 -8.4661e-01\nIrele               1.4823e+00 -2.5741e-03  2.4615e-01  2.9929e+00\nIrepo               2.8011e-02 -4.0251e-05  3.8588e-03  4.5157e-01\nIrepodun            4.0232e-01 -1.5971e-03  1.5288e-01  1.0331e+00\nIrepodun/Ifelodun  -1.4359e-01 -2.5706e-04  2.4639e-02 -9.1315e-01\nIrepodun1           4.1209e-02 -5.8880e-05  5.6446e-03  5.4927e-01\nIrewole             5.5409e-02 -2.4519e-04  2.3501e-02  3.6304e-01\nIsa                 1.7855e-01 -1.0515e-03  1.0070e-01  5.6596e-01\nIse/Orun           -5.5625e-01 -3.2065e-03  3.0643e-01 -9.9906e-01\nIseyin              4.9085e-01 -1.7745e-03  1.6982e-01  1.1954e+00\nIshielu             6.1752e-02 -6.4300e-06  6.1646e-04  2.4874e+00\nIsi-Uzo            -7.8926e-01 -4.2910e-03  4.0963e-01 -1.2265e+00\nIsiala-Ngwa North  -3.4073e-02 -3.3908e-06  3.2509e-04 -1.8896e+00\nIsiala-Ngwa South   2.1568e-02 -8.7041e-04  8.3376e-02  7.7709e-02\nIsiala Mbano        5.1853e-02 -2.2893e-04  2.1943e-02  3.5159e-01\nIsin                2.8010e-02 -2.2119e-06  2.1206e-04  1.9236e+00\nIsiukwuato         -4.3789e-02 -1.8964e-04  1.8178e-02 -3.2337e-01\nIsokan              6.2803e-02 -4.5370e-05  4.3496e-03  9.5295e-01\nIsoko North         1.3502e+00 -1.9288e-03  1.8456e-01  3.1473e+00\nIsoko South         7.6254e-01 -1.2150e-03  1.1634e-01  2.2392e+00\nIsu                -1.5381e-01 -2.2319e-03  2.1350e-01 -3.2804e-01\nItas/Gadau          2.9842e-01 -1.8481e-04  1.7715e-02  2.2435e+00\nItesiwaju           3.9657e-01 -1.9917e-03  1.9057e-01  9.1299e-01\nItu                 2.0536e+00 -4.4867e-03  4.2823e-01  3.1451e+00\nIvo                -1.4101e-02 -2.1883e-05  2.0979e-03 -3.0739e-01\nIwajowa             1.1381e-01 -6.0340e-05  5.7846e-03  1.4971e+00\nIwo                 7.8850e-02 -2.7373e-04  2.6236e-02  4.8849e-01\nIzzi                9.4463e-01 -2.1110e-03  2.0196e-01  2.1067e+00\nJaba                2.1143e-01 -1.8170e-03  1.7388e-01  5.1139e-01\nJada               -1.7954e-01 -1.4184e-04  1.3597e-02 -1.5385e+00\nJahun               1.4883e+00 -1.4068e-03  1.3469e-01  4.0591e+00\nJakusko             9.0543e-01 -1.7589e-03  1.6834e-01  2.2111e+00\nJalingo            -1.4758e-01 -1.1006e-04  1.0550e-02 -1.4357e+00\nJama'are            2.4746e-01 -1.2561e-04  1.2041e-02  2.2563e+00\nJega                3.9775e-01 -4.2746e-04  4.0965e-02  1.9673e+00\nJema'a              2.9801e-02 -8.8231e-04  8.4515e-02  1.0555e-01\nJere                8.5951e-01 -3.9259e-04  3.7624e-02  4.4332e+00\nJibia               2.3571e-02 -1.4494e-05  1.3896e-03  6.3271e-01\nJos East            1.9591e-01 -2.6707e-04  2.5598e-02  1.2262e+00\nJos North           1.4182e-01 -6.7265e-04  6.4446e-02  5.6131e-01\nJos South          -1.3114e-01 -2.6765e-04  2.5654e-02 -8.1710e-01\nKabba/Bunu          7.7901e-01 -7.6557e-04  7.3341e-02  2.8794e+00\nKabo                7.2295e-01 -8.6408e-04  8.2771e-02  2.5159e+00\nKachia              7.2934e-02 -2.7062e-05  2.5944e-03  1.4324e+00\nKaduna North        7.3616e-01 -1.7534e-03  1.6780e-01  1.8014e+00\nKaduna South       -1.4370e+00 -2.8534e-03  2.7279e-01 -2.7459e+00\nKafin Hausa         1.6677e+00 -3.6997e-03  3.5339e-01  2.8116e+00\nKafur               2.8712e-01 -7.1270e-04  6.8279e-02  1.1015e+00\nKaga                2.0956e+00 -3.7849e-03  3.6149e-01  3.4917e+00\nKagarko             2.0806e-01 -3.2521e-03  3.1077e-01  3.7906e-01\nKaiama             -2.5295e-02 -3.4221e-05  3.2808e-03 -4.4103e-01\nKaita              -1.8773e-02 -2.1142e-05  2.0269e-03 -4.1652e-01\nKajola              9.8393e-02 -7.3608e-05  7.0564e-03  1.1722e+00\nKajuru              6.8871e-01 -3.0836e-03  2.9473e-01  1.2743e+00\nKala/Balge          2.9257e+00 -3.7849e-03  3.6149e-01  4.8724e+00\nKalgo               8.0126e-01 -2.9525e-03  2.8223e-01  1.5138e+00\nKaltungo           -1.7419e-01 -2.3286e-04  2.2320e-02 -1.1644e+00\nKanam               2.6013e-01 -2.9617e-04  2.8386e-02  1.5457e+00\nKankara             6.9498e-01 -8.4928e-04  8.1353e-02  2.4396e+00\nKanke               4.7263e-01 -7.5532e-04  7.2360e-02  1.7598e+00\nKankia              4.0006e-01 -2.9398e-04  2.8176e-02  2.3851e+00\nKano Municipal      5.1438e-01 -5.0083e-04  4.7992e-02  2.3503e+00\nKarasuwa            7.5820e-01 -6.8884e-04  6.5995e-02  2.9541e+00\nKaraye             -2.3685e-01 -1.2679e-04  1.2154e-02 -2.1473e+00\nKarim-Lamido        2.2396e-02 -2.1402e-04  2.0514e-02  1.5786e-01\nKaru                8.0242e-03 -1.0948e-06  1.0496e-04  7.8334e-01\nKatagum             2.1832e-03 -4.0251e-05  3.8588e-03  3.5793e-02\nKatcha             -3.2096e-03 -3.7061e-06  3.5531e-04 -1.7008e-01\nKatsina             8.3058e-04 -9.6738e-06  9.2745e-04  2.7591e-02\nKatsina-Ala        -4.5399e-02 -1.6377e-05  1.5701e-03 -1.1453e+00\nKaugama             1.3325e+00 -2.6917e-03  2.5737e-01  2.6318e+00\nKaura               2.5235e-02 -1.0351e-04  9.9224e-03  2.5438e-01\nKaura Namoda        2.7106e-01 -7.4276e-04  7.1157e-02  1.0189e+00\nKauru              -5.1301e-02 -6.4638e-05  6.1966e-03 -6.5088e-01\nKazaure             1.5482e-01 -1.7441e-04  1.6718e-02  1.1987e+00\nKeana               2.8025e-01 -7.5548e-04  7.2376e-02  1.0445e+00\nKebbe               2.0277e-01 -2.5975e-04  2.4896e-02  1.2867e+00\nKeffi              -2.7161e-01 -5.6137e-04  5.3790e-02 -1.1687e+00\nKhana               1.5980e-01 -1.1711e-04  1.1227e-02  1.5093e+00\nKibiya              3.5894e-01 -8.1457e-04  7.8031e-02  1.2879e+00\nKirfi               1.9831e-01 -1.7733e-04  1.6998e-02  1.5224e+00\nKiri Kasamma        8.2440e-01 -7.3902e-04  7.0799e-02  3.1011e+00\nKiru                4.6549e-01 -5.3023e-04  5.0807e-02  2.0675e+00\nKiyawa              9.7556e-01 -1.0867e-03  1.0407e-01  3.0274e+00\nKogi                4.2455e-01 -1.7042e-03  1.6311e-01  1.0554e+00\nKoko/Besse          8.9677e-01 -2.8186e-03  2.6947e-01  1.7330e+00\nKokona              1.2642e-02 -1.0564e-04  1.0127e-02  1.2668e-01\nKolokuma/Opokuma   -8.9174e-01 -2.8042e-03  2.6809e-01 -1.7168e+00\nKonduga             2.1739e+00 -3.7849e-03  3.6149e-01  3.6220e+00\nKonshisha          -4.6756e-03 -4.0922e-04  3.9217e-02 -2.1544e-02\nKontagora           6.9382e-02 -1.6426e-05  1.5748e-03  1.7488e+00\nKosofe              1.3996e+00 -1.9181e-03  1.8355e-01  3.2713e+00\nKubau               6.5497e-01 -2.2999e-03  2.1999e-01  1.4013e+00\nKudan               1.3476e-02 -1.2443e-03  1.1914e-01  4.2646e-02\nKuje                6.5930e-02 -7.3678e-04  7.0585e-02  2.5093e-01\nKukawa              2.9257e+00 -3.7849e-03  3.6149e-01  4.8724e+00\nKumbotso            5.2681e-01 -9.7876e-04  9.3744e-02  1.7238e+00\nKunchi              1.0128e+00 -1.8302e-03  1.7515e-01  2.4244e+00\nKura                1.1037e-01 -2.7881e-05  2.6730e-03  2.1353e+00\nKurfi               3.9653e-02 -2.4629e-05  2.3612e-03  8.1655e-01\nKurmi               8.6002e-02 -1.0325e-04  9.8982e-03  8.6547e-01\nKusada              1.0267e+00 -3.1902e-03  3.0488e-01  1.8653e+00\nKwali               9.0320e-02 -7.6510e-05  7.3346e-03  1.0555e+00\nKwami               1.2244e+00 -2.5422e-03  2.4311e-01  2.4884e+00\nKwande              2.2368e-01 -2.3781e-03  2.2746e-01  4.7399e-01\nKware              -1.2906e-02 -6.5913e-06  6.3192e-04 -5.1313e-01\nKwaya Kusar         4.1295e-02 -1.9433e-05  1.8631e-03  9.5716e-01\nLafia              -1.6855e-02 -4.3683e-06  4.1880e-04 -8.2341e-01\nLagelu             -5.2701e-02 -7.0309e-05  6.7402e-03 -6.4106e-01\nLagos Island        3.5584e-01 -1.1199e-04  1.0736e-02  3.4353e+00\nLagos Mainland      1.6590e+00 -2.8475e-03  2.7222e-01  3.1851e+00\nLamurde             1.0395e-01 -3.7849e-03  3.6149e-01  1.7918e-01\nLangtang North      2.0724e-01 -3.6211e-04  3.4704e-02  1.1144e+00\nLangtang South     -8.5503e-02 -2.2012e-04  2.1099e-02 -5.8713e-01\nLapai              -2.9814e-01 -4.9803e-04  4.7724e-02 -1.3625e+00\nLau                -1.4923e-01 -1.8062e-04  1.7314e-02 -1.1328e+00\nLavun              -2.6868e-02 -1.0667e-05  1.0227e-03 -8.3984e-01\nLere               -1.2573e-01 -4.1675e-05  3.9953e-03 -1.9885e+00\nLogo                4.7723e-02 -9.1749e-05  8.7955e-03  5.0983e-01\nLokoja             -3.6641e-01 -1.8026e-04  1.7279e-02 -2.7861e+00\nMachina             7.4966e-01 -8.4715e-04  8.1150e-02  2.6346e+00\nMadagali           -6.5567e-02 -3.7849e-03  3.6149e-01 -1.0276e-01\nMadobi              9.4495e-01 -1.5212e-03  1.4562e-01  2.4803e+00\nMafa                2.6472e+00 -3.7849e-03  3.6149e-01  4.4091e+00\nMagama              2.3831e-01 -1.9232e-04  1.8435e-02  1.7566e+00\nMagumeri            9.7898e-01 -5.4972e-04  5.2674e-02  4.2680e+00\nMai'adua            7.5258e-02 -2.0307e-04  1.9465e-02  5.4088e-01\nMaiduguri           2.2461e+00 -3.1774e-03  3.0366e-01  4.0818e+00\nMaigatari           5.9420e-01 -3.6828e-04  3.5295e-02  3.1648e+00\nMaiha              -1.8910e-01 -4.4971e-04  4.3095e-02 -9.0875e-01\nMaiyama             6.9880e-01 -9.6111e-04  9.2056e-02  2.3063e+00\nMakoda              1.2035e+00 -3.3976e-03  3.2463e-01  2.1183e+00\nMakurdi             1.4605e-01 -5.4565e-05  5.2310e-03  2.0201e+00\nMalam Madori        1.3767e+00 -2.5647e-03  2.4525e-01  2.7852e+00\nMalumfashi          6.0980e-01 -9.7220e-04  9.3117e-02  2.0015e+00\nMangu               7.2800e-02 -6.1502e-05  5.8960e-03  9.4890e-01\nMani               -2.8168e-02 -3.4020e-05  3.2615e-03 -4.9263e-01\nMaradun             1.8726e-01 -9.5310e-05  9.1367e-03  1.9601e+00\nMariga              2.9815e-01 -6.5538e-04  6.2791e-02  1.1924e+00\nMarkafi             1.5326e-01 -3.2504e-03  3.1061e-01  2.8082e-01\nMarte               2.9257e+00 -3.7849e-03  3.6149e-01  4.8724e+00\nMaru               -5.9743e-02 -1.2652e-04  1.2128e-02 -5.4133e-01\nMashegu             4.2151e-01 -2.3644e-03  2.2615e-01  8.9133e-01\nMashi               1.1023e-01 -4.5537e-04  4.3638e-02  5.2987e-01\nMatazu              3.6146e-01 -3.5753e-04  3.4265e-02  1.9546e+00\nMayo-Belwa          1.9308e-01 -3.4919e-04  3.3466e-02  1.0574e+00\nMbaitoli            1.1057e-01 -4.4197e-04  4.2354e-02  5.3942e-01\nMbo                 2.9536e+00 -5.3440e-03  5.0960e-01  4.1449e+00\nMichika            -1.5366e-02 -3.4919e-04  3.3466e-02 -8.2086e-02\nMiga                2.1001e+00 -3.4626e-03  3.3082e-01  3.6573e+00\nMikang              7.0101e-02 -5.6340e-05  5.4011e-03  9.5462e-01\nMinjibir            1.3399e+00 -3.5830e-03  3.4228e-01  2.2964e+00\nMisau               4.0169e-02 -1.3971e-04  1.3393e-02  3.4831e-01\nMkpat Enin          1.9387e+00 -2.6741e-03  2.5569e-01  3.8393e+00\nMoba                1.2431e-01 -1.1282e-04  1.0815e-02  1.1965e+00\nMobbar              2.6994e+00 -3.7849e-03  3.6149e-01  4.4960e+00\nMokwa               4.9161e-02 -3.7363e-05  3.5820e-03  8.2203e-01\nMonguno             2.6778e+00 -3.7849e-03  3.6149e-01  4.4600e+00\nMopa-Muro           8.3377e-01 -2.9196e-03  2.7909e-01  1.5838e+00\nMoro               -5.9388e-03 -2.5565e-05  2.4509e-03 -1.1944e-01\nMubi North         -1.2733e+00 -1.2060e-02  1.1423e+00 -1.1801e+00\nMubi South         -6.5347e-01 -1.2060e-02  1.1423e+00 -6.0014e-01\nMusawa              7.3612e-01 -1.3220e-03  1.2658e-01  2.0727e+00\nMushin              1.2865e+00 -1.2075e-03  1.1563e-01  3.7868e+00\nMuya                1.0275e-01 -2.0245e-04  1.9406e-02  7.3904e-01\nNafada              5.6178e-01 -8.9621e-04  8.5845e-02  1.9204e+00\nNangere             1.5898e-01 -2.3145e-04  2.2185e-02  1.0689e+00\nNasarawa           -4.9541e-01 -5.0332e-04  4.8231e-02 -2.2535e+00\nNasarawa-Eggon      9.5563e-02 -2.2466e-04  2.1534e-02  6.5275e-01\nNasarawa1           3.3023e-01 -2.7118e-04  2.5992e-02  2.0500e+00\nNdokwa East         3.2866e-01 -1.1181e-03  1.0707e-01  1.0078e+00\nNdokwa West         9.3170e-01 -1.8295e-03  1.7507e-01  2.2311e+00\nNembe               5.1668e-01 -2.1219e-03  2.0300e-01  1.1515e+00\nNgala               2.6778e+00 -3.7849e-03  3.6149e-01  4.4600e+00\nNganzai             2.4208e+00 -3.7849e-03  3.6149e-01  4.0326e+00\nNgaski              3.5953e-01 -4.8020e-04  4.6016e-02  1.6783e+00\nNgor-Okpala         9.4749e-02 -9.7876e-04  9.3744e-02  3.1266e-01\nNguru               1.2880e+00 -2.1596e-03  2.0660e-01  2.8384e+00\nNingi               5.5496e-01 -8.9167e-04  8.5411e-02  1.9019e+00\nNjaba              -9.9327e-02 -3.3992e-04  3.2578e-02 -5.4842e-01\nNjikoka            -9.0677e-02 -1.5926e-05  1.5268e-03 -2.3202e+00\nNkanu East          1.2274e+00 -3.4045e-03  3.2529e-01  2.1580e+00\nNkanu West         -5.0398e-01 -2.7414e-04  2.6276e-02 -3.1074e+00\nNkwerre            -1.3557e-01 -1.0199e-03  9.7684e-02 -4.3051e-01\nNnewi North         4.9364e-01 -3.0935e-04  2.9649e-02  2.8686e+00\nNnewi South         1.0716e+00 -2.6150e-03  2.5005e-01  2.1482e+00\nNsit Atai           2.8548e+00 -4.8306e-03  4.6089e-01  4.2123e+00\nNsit Ibom           1.1418e+00 -8.6397e-04  8.2760e-02  3.9721e+00\nNsit Ubium          1.2797e+00 -1.2838e-03  1.2293e-01  3.6535e+00\nNsukka              5.1570e-01 -9.5636e-04  9.1601e-02  1.7071e+00\nNuman               3.0362e-02 -3.7849e-03  3.6149e-01  5.6794e-02\nNwangele           -8.9812e-02 -1.8068e-03  1.7291e-01 -2.1164e-01\nObafemi-Owode       1.9831e-01 -5.0989e-04  4.8859e-02  8.9945e-01\nObanliku            8.7621e-03 -2.4151e-06  2.3154e-04  5.7599e-01\nObi                -7.4902e-02 -1.4346e-04  1.3752e-02 -6.3750e-01\nObi Ngwa            1.4974e+00 -2.6403e-03  2.5247e-01  2.9854e+00\nObi1                5.4892e-01 -3.9802e-03  3.8008e-01  8.9683e-01\nObia/Akpor          1.5581e-02 -1.4640e-06  1.4036e-04  1.3153e+00\nObokun              1.1798e-01 -9.4646e-05  9.0731e-03  1.2396e+00\nObot Akara          1.7023e+00 -4.0429e-03  3.8603e-01  2.7464e+00\nObowo               2.2831e-02 -1.1423e-05  1.0952e-03  6.9024e-01\nObubra             -8.3856e-02 -5.6552e-04  5.4187e-02 -3.5781e-01\nObudu               2.3763e-02 -1.9656e-05  1.8844e-03  5.4787e-01\nOdeda               2.7064e-02 -2.9367e-05  2.8154e-03  5.1060e-01\nOdigbo              1.5211e+00 -5.0364e-03  4.8042e-01  2.2019e+00\nOdo-Otin            8.4254e-02 -2.4853e-05  2.3827e-03  1.7266e+00\nOdogbolu           -4.4492e-02 -1.5794e-04  1.5140e-02 -3.6032e-01\nOdukpani            1.0762e+00 -1.0140e-03  9.7115e-02  3.4568e+00\nOffa                5.8159e-01 -1.2309e-03  1.1787e-01  1.6976e+00\nOfu                 9.1819e-01 -2.9577e-03  2.8272e-01  1.7324e+00\nOgba/Egbema/Ndoni   8.1537e-02 -8.0423e-04  7.7042e-02  2.9665e-01\nOgbadibo            3.0637e-03 -1.5660e-04  1.5012e-02  2.6284e-02\nOgbaru              1.5114e-01 -2.8305e-04  2.7129e-02  9.1935e-01\nOgbia               2.9778e-01 -3.9461e-04  3.7817e-02  1.5333e+00\nOgbomosho North    -1.7226e-02 -1.8351e-04  1.7590e-02 -1.2850e-01\nOgbomosho South    -1.4049e-01 -5.8314e-04  5.5875e-02 -5.9188e-01\nOgo Oluwa          -4.6806e-03 -8.8537e-05  8.4875e-03 -4.9844e-02\nOgoja               3.6024e-02 -2.5360e-05  2.4313e-03  7.3109e-01\nOgori/Magongo       7.9705e-01 -7.6828e-04  7.3600e-02  2.9408e+00\nOgu/Bolo            7.5854e-01 -3.7849e-03  3.6149e-01  1.2679e+00\nOgun waterside      6.2356e-02 -3.1642e-05  3.0335e-03  1.1327e+00\nOguta              -6.0752e-01 -1.7910e-03  1.7140e-01 -1.4631e+00\nOhafia              1.6679e-01 -5.8314e-04  5.5875e-02  7.0806e-01\nOhaji/Egbema        1.1373e-01 -1.5450e-04  1.4810e-02  9.3583e-01\nOhaozara            1.5720e-01 -2.9876e-04  2.8635e-02  9.3075e-01\nOhaukwu             3.0343e-01 -4.4971e-04  4.3095e-02  1.4638e+00\nOhimini             1.1662e+00 -1.4935e-03  1.4298e-01  3.0881e+00\nOji-River           4.4024e-02 -8.4409e-06  8.0925e-04  1.5479e+00\nOjo                -4.0925e-02 -2.2499e-06  2.1570e-04 -2.7864e+00\nOju                 6.5513e-01 -1.8227e-03  1.7443e-01  1.5730e+00\nOke-Ero             5.7507e-01 -1.5572e-03  1.4906e-01  1.4935e+00\nOkehi               1.6047e+00 -4.0335e-03  3.8515e-01  2.5922e+00\nOkene               6.0406e-01 -5.0332e-04  4.8231e-02  2.7528e+00\nOkigwe             -1.5641e-01 -1.5035e-03  1.4393e-01 -4.0831e-01\nOkitipupa           1.2258e+00 -3.5472e-03  3.3887e-01  2.1119e+00\nOkobo               1.8869e+00 -2.4619e-03  2.3545e-01  3.8937e+00\nOkpe                4.7100e-01 -3.0829e-04  2.9548e-02  2.7419e+00\nOkpokwu             2.3615e-01 -8.1250e-04  7.7833e-02  8.4938e-01\nOkrika              7.7493e-01 -2.2319e-03  2.1350e-01  1.6819e+00\nOla-oluwa           3.3680e-01 -2.0533e-03  1.9645e-01  7.6451e-01\nOlamabolo          -1.5582e-01 -2.5222e-03  2.4120e-01 -3.1214e-01\nOlorunda            7.6695e-03 -9.1377e-07  8.7606e-05  8.1951e-01\nOlorunsogo          4.0109e-02 -6.1932e-05  5.9372e-03  5.2134e-01\nOluyole             8.7111e-02 -4.9105e-04  4.7055e-02  4.0384e-01\nOmala               2.7825e+00 -7.5107e-03  7.1466e-01  3.3003e+00\nOmumma             -3.5426e-01 -4.1616e-04  3.9882e-02 -1.7718e+00\nOna-Ara            -3.1029e-01 -6.5799e-04  6.3041e-02 -1.2332e+00\nOndo East           8.1511e-01 -2.3909e-03  2.2868e-01  1.7095e+00\nOndo West           1.4400e+00 -2.6302e-03  2.5151e-01  2.8767e+00\nOnicha              3.3399e-01 -5.1957e-04  4.9787e-02  1.4992e+00\nOnitsha North       8.1434e-01 -2.3369e-03  2.2352e-01  1.7274e+00\nOnitsha South       6.5840e-01 -1.0867e-03  1.0407e-01  2.0443e+00\nOnna                1.4113e+00 -1.3240e-03  1.2677e-01  3.9677e+00\nOpobo/Nkoro         4.3259e-01 -2.6765e-04  2.5654e-02  2.7025e+00\nOredo               3.3901e-01 -1.6832e-04  1.6135e-02  2.6702e+00\nOrelope            -4.2131e-02 -4.4418e-05  4.2583e-03 -6.4495e-01\nOrhionmwon          1.2166e+00 -1.7556e-03  1.6802e-01  2.9725e+00\nOri Ire            -3.2261e-02 -1.2247e-03  1.1727e-01 -9.0631e-02\nOriade              4.4824e-02 -2.1463e-05  2.0576e-03  9.8863e-01\nOrlu                4.4467e-02 -2.0988e-04  2.0117e-02  3.1499e-01\nOrolu               2.2019e-01 -1.1657e-03  1.1163e-01  6.6253e-01\nOron                2.9534e-01 -4.9201e-05  4.7168e-03  4.3010e+00\nOrsu                1.5236e-02 -2.4107e-06  2.3112e-04  1.0024e+00\nOru East            1.5091e-01 -4.8319e-04  4.6302e-02  7.0356e-01\nOru West            1.5969e-01 -5.7171e-04  5.4780e-02  6.8475e-01\nOruk Anam           3.3079e+00 -6.5250e-03  6.2149e-01  4.2043e+00\nOrumba North        2.7724e-01 -5.0989e-04  4.8859e-02  1.2566e+00\nOrumba South        3.6828e-02 -1.9433e-05  1.8631e-03  8.5367e-01\nOse                 1.4236e+00 -3.4124e-03  3.2604e-01  2.4991e+00\nOshimili North      2.1123e-02 -1.2646e-03  1.2109e-01  6.4338e-02\nOshimili South     -7.9059e-01 -7.7691e-04  7.4426e-02 -2.8951e+00\nOshodi-Isolo        1.9264e+00 -3.7849e-03  3.6149e-01  3.2104e+00\nOsisioma Ngwa       1.0197e-01 -7.3478e-05  7.0441e-03  1.2158e+00\nOsogbo              1.1194e-02 -1.7851e-05  1.7114e-03  2.7102e-01\nOturkpo             1.0547e+00 -1.2392e-03  1.1866e-01  3.0653e+00\nOvia North East     1.5945e-01 -4.3579e-05  4.1779e-03  2.4675e+00\nOvia South West     2.6241e-01 -9.3791e-05  8.9911e-03  2.7684e+00\nOwan East           5.4227e-01 -3.0099e-04  2.8848e-02  3.1945e+00\nOwan West           1.4792e+00 -5.0236e-03  4.7920e-01  2.1440e+00\nOwerri-Municipal    4.3511e-01 -2.5469e-03  2.4356e-01  8.8681e-01\nOwerri North       -1.3371e-01 -1.9795e-04  1.8974e-02 -9.6928e-01\nOwerri West         7.5816e-02 -2.8565e-05  2.7385e-03  1.4493e+00\nOwo                 2.9038e-01 -6.5373e-04  6.2634e-02  1.1629e+00\nOye                 1.2527e-01 -6.4287e-04  6.1594e-02  5.0733e-01\nOyi                -9.4175e-02 -1.7621e-05  1.6894e-03 -2.2908e+00\nOyigbo             -3.8089e-01 -1.7110e-03  1.6375e-01 -9.3701e-01\nOyo East            2.7931e-02 -9.6738e-06  9.2745e-04  9.1746e-01\nOyo West            2.4896e-01 -8.6408e-04  8.2771e-02  8.6837e-01\nOyun                5.4104e-01 -1.0289e-03  9.8539e-02  1.7268e+00\nPaikoro             1.5328e-02 -1.7455e-04  1.6732e-02  1.1985e-01\nPankshin            2.5233e-01 -3.4119e-04  3.2700e-02  1.3973e+00\nPatani              1.3267e+00 -3.9802e-03  3.8008e-01  2.1585e+00\nPategi              1.8126e-01 -7.8916e-05  7.5653e-03  2.0849e+00\nPort-Harcourt       5.7446e-01 -1.7768e-03  1.7005e-01  1.3974e+00\nPotiskum            1.8185e-01 -2.2319e-03  2.1350e-01  3.9838e-01\nQua'an Pan         -1.6428e-02 -5.4584e-05  5.2329e-03 -2.2634e-01\nRabah               1.5301e-01 -2.2966e-03  2.1968e-01  3.3136e-01\nRafi               -8.8845e-02 -6.8930e-05  6.6080e-03 -1.0921e+00\nRano                3.2071e-01 -4.8900e-04  4.6859e-02  1.4838e+00\nRemo North         -3.0625e-02 -1.5540e-04  1.4897e-02 -2.4964e-01\nRijau               2.8566e-01 -6.1086e-04  5.8529e-02  1.1833e+00\nRimi               -1.6475e-02 -3.9202e-05  3.7583e-03 -2.6810e-01\nRimin Gado          1.3051e+00 -3.1765e-03  3.0357e-01  2.3744e+00\nRingim              1.5881e+00 -3.0883e-03  2.9517e-01  2.9287e+00\nRiyom              -9.3027e-03 -1.6262e-05  1.5590e-03 -2.3519e-01\nRogo               -2.5249e-02 -1.7942e-05  1.7202e-03 -6.0835e-01\nRoni                4.1764e-02 -4.5104e-06  4.3243e-04  2.0086e+00\nSabon-Gari          1.6832e-01 -2.2687e-04  2.1745e-02  1.1430e+00\nSabon Birni        -2.8323e-01 -2.2575e-03  2.1594e-01 -6.0465e-01\nSabuwa             -4.6275e-01 -4.8960e-03  4.6710e-01 -6.6991e-01\nSafana              4.9713e-01 -1.4523e-03  1.3903e-01  1.3372e+00\nSagbama             8.0345e-01 -3.6089e-03  3.4475e-01  1.3745e+00\nSakaba              1.2548e-02 -4.0050e-04  3.8382e-02  6.6095e-02\nSaki East          -1.2131e-02 -1.8371e-06  1.7613e-04 -9.1392e-01\nSaki West           4.2015e-02 -2.2984e-05  2.2035e-03  8.9554e-01\nSandamu            -5.4538e-03 -3.6859e-05  3.5337e-03 -9.1125e-02\nSanga               1.4102e-01 -4.8062e-04  4.6056e-02  6.5935e-01\nSapele              1.6869e+00 -2.7778e-03  2.6558e-01  3.2788e+00\nSardauna            6.1311e-02 -1.1853e-03  1.1351e-01  1.8550e-01\nShagamu            -4.1971e-01 -6.5294e-04  6.2558e-02 -1.6754e+00\nShagari            -7.2536e-02 -3.0323e-05  2.9071e-03 -1.3448e+00\nShanga              6.3354e-01 -3.5896e-03  3.4291e-01  1.0880e+00\nShani              -4.3142e-02 -3.7849e-03  3.6149e-01 -6.5460e-02\nShanono             3.1275e-01 -1.9717e-04  1.8900e-02  2.2764e+00\nShelleng           -2.7051e-01 -2.1402e-04  2.0514e-02 -1.8872e+00\nShendam             1.1102e-01 -3.1991e-04  3.0661e-02  6.3588e-01\nShinkafi            2.6289e-01 -3.5946e-04  3.4450e-02  1.4183e+00\nShira               3.3608e-01 -3.8933e-04  3.7311e-02  1.7419e+00\nShiroro            -3.0828e-01 -4.9388e-04  4.7326e-02 -1.4148e+00\nShomgom             9.5717e-02 -2.2299e-04  2.1374e-02  6.5623e-01\nShomolu             8.7142e-01 -6.1533e-04  5.8957e-02  3.5914e+00\nSilame             -1.7549e-01 -3.4919e-04  3.3466e-02 -9.5740e-01\nSoba               -2.4456e-03 -1.6219e-05  1.5549e-03 -6.1609e-02\nSokoto North       -3.9713e-01 -2.1110e-03  2.0196e-01 -8.7900e-01\nSokoto South       -1.2598e-01 -4.1616e-04  3.9882e-02 -6.2873e-01\nSong                2.5438e-01 -3.4919e-04  3.3466e-02  1.3924e+00\nSouthern Ijaw       2.4416e+00 -5.0593e-03  4.8259e-01  3.5220e+00\nSule-Tankarkar      8.1692e-01 -1.4868e-03  1.4233e-01  2.1693e+00\nSuleja             -8.2894e-02 -1.2935e-04  1.2400e-02 -7.4325e-01\nSumaila             2.6104e-01 -2.8851e-04  2.7652e-02  1.5715e+00\nSuru                1.8422e+00 -5.2845e-03  5.0396e-01  2.6025e+00\nSurulere            1.3548e+00 -1.9953e-03  1.9091e-01  3.1053e+00\nSurulere1           1.6963e-01 -4.7882e-04  4.5883e-02  7.9413e-01\nTafa               -4.3713e-01 -1.6083e-03  1.5395e-01 -1.1100e+00\nTafawa-Balewa       6.0695e-01 -1.1163e-03  1.0690e-01  1.8598e+00\nTai                -9.4923e-01 -2.7778e-03  2.6558e-01 -1.8366e+00\nTakai               6.7533e-01 -6.4153e-04  6.1466e-02  2.7265e+00\nTakum               2.0847e-01 -3.3992e-04  3.2578e-02  1.1569e+00\nTalata Mafara      -2.1549e-02 -2.8902e-06  2.7709e-04 -1.2944e+00\nTambuwal            3.7056e-01 -1.0766e-03  1.0310e-01  1.1574e+00\nTangaza             4.2412e-01 -2.3274e-03  2.2261e-01  9.0383e-01\nTarauni             7.1114e-01 -2.1324e-03  2.0400e-01  1.5792e+00\nTarka              -2.9865e-01 -5.0675e-04  4.8559e-02 -1.3530e+00\nTarmua              1.2721e+00 -1.4231e-03  1.3624e-01  3.4503e+00\nTaura               1.2027e+00 -1.8024e-03  1.7249e-01  2.9002e+00\nTofa                1.6398e+00 -3.5973e-03  3.4365e-01  2.8033e+00\nToro                3.7045e-01 -6.4770e-04  6.2057e-02  1.4897e+00\nToto                1.6441e-01 -3.4138e-05  3.2728e-03  2.8745e+00\nToungo              1.1579e-01 -7.4276e-04  7.1157e-02  4.3685e-01\nTsafe               3.8635e-01 -5.5872e-04  5.3537e-02  1.6722e+00\nTsanyawa            3.6623e-01 -2.2783e-04  2.1838e-02  2.4799e+00\nTudun Wada         -2.8536e-01 -2.1074e-04  2.0200e-02 -2.0063e+00\nTureta             -3.7949e-01 -1.7556e-03  1.6802e-01 -9.2152e-01\nUdenu               2.3304e-01 -2.8873e-03  2.7601e-01  4.4908e-01\nUdi                 1.2272e+00 -2.0433e-03  1.9550e-01  2.7800e+00\nUdu                 2.0115e-02 -6.1434e-07  5.8899e-05  2.6210e+00\nUdung Uko           2.9081e+00 -5.1470e-03  4.9092e-01  4.1579e+00\nUghelli North      -9.8234e-02 -1.1094e-05  1.0636e-03 -3.0118e+00\nUghelli South       9.4775e-01 -1.1853e-03  1.1351e-01  2.8166e+00\nUgwunagbo           5.7896e-01 -1.9026e-03  1.8206e-01  1.3614e+00\nUhunmwonde          5.0024e-01 -2.1402e-04  2.0514e-02  3.4941e+00\nUkanafun            3.0615e+00 -5.9570e-03  5.6772e-01  4.0711e+00\nUkum                8.7790e-02 -3.1123e-04  2.9829e-02  5.1011e-01\nUkwa East           1.5576e+00 -2.9821e-03  2.8505e-01  2.9230e+00\nUkwa West           2.5005e-01 -1.0523e-03  1.0078e-01  7.9098e-01\nUkwuani             1.2849e+00 -4.2767e-03  4.0827e-01  2.0177e+00\nUmu-Nneochi         3.5439e-02 -4.9061e-05  4.7034e-03  5.1747e-01\nUmuahia North      -6.5181e-02 -4.9105e-04  4.7055e-02 -2.9821e-01\nUmuahia South       2.8278e-02 -4.4644e-05  4.2800e-03  4.3292e-01\nUngogo              9.2844e-01 -2.1875e-03  2.0926e-01  2.0344e+00\nUnuimo             -3.5063e-02 -1.9433e-05  1.8631e-03 -8.1189e-01\nUruan               2.7899e+00 -6.6034e-03  6.2891e-01  3.5263e+00\nUrue-Offong/Oruko   2.4410e+00 -3.7044e-03  3.5384e-01  4.1099e+00\nUshongo             4.8112e-02 -1.3931e-04  1.3354e-02  4.1755e-01\nUssa                1.1858e-01 -1.1490e-04  1.1014e-02  1.1310e+00\nUvwie               1.4148e+00 -3.9802e-03  3.8008e-01  2.3014e+00\nUyo                 1.4100e+00 -1.2150e-03  1.1634e-01  4.1373e+00\nUzo-Uwani           8.0040e-02 -2.9886e-03  2.8567e-01  1.5534e-01\nVandeikya          -4.3262e-02 -5.5770e-05  5.3465e-03 -5.9090e-01\nWamako              6.3222e-02 -3.5570e-04  3.4090e-02  3.4435e-01\nWamba               1.6554e-02 -1.5350e-04  1.4715e-02  1.3773e-01\nWarawa              2.4413e-01 -2.2582e-04  2.1645e-02  1.6609e+00\nWarji               9.0507e-01 -1.5773e-03  1.5098e-01  2.3334e+00\nWarri North         2.3180e+00 -4.8775e-03  4.6533e-01  3.4052e+00\nWarri South         8.8537e-01 -7.5313e-04  7.2151e-02  3.2990e+00\nWarri South West    2.4599e+00 -7.2831e-03  6.9316e-01  2.9634e+00\nWasagu/Danko       -1.0318e-02 -9.5976e-06  9.2014e-04 -3.3982e-01\nWase                6.9783e-02 -1.7936e-04  1.7192e-02  5.3358e-01\nWudil               3.6216e-01 -3.0614e-04  2.9341e-02  2.1161e+00\nWukari              1.6676e-02 -2.2639e-05  2.1704e-03  3.5845e-01\nWurno              -5.4569e-03 -5.6066e-06  5.3752e-04 -2.3513e-01\nWushishi           -3.7080e-02 -4.4380e-04  4.2530e-02 -1.7765e-01\nYabo               -7.3667e-02 -2.0289e-03  1.9412e-01 -1.6259e-01\nYagba East          9.0056e-01 -3.6541e-03  3.4905e-01  1.5305e+00\nYagba West          1.2909e+00 -2.5791e-03  2.4663e-01  2.6045e+00\nYakurr              1.4592e-02 -1.4831e-05  1.4219e-03  3.8736e-01\nYala                8.2761e-02 -3.5101e-05  3.3651e-03  1.4273e+00\nYamaltu/Deba        1.0531e-01 -6.5178e-04  6.2448e-02  4.2404e-01\nYankwashi           1.0921e-01 -1.1716e-03  1.1219e-01  3.2953e-01\nYauri               3.8913e-01 -9.4484e-04  9.0499e-02  1.2967e+00\nYenegoa             2.8516e-01 -1.1335e-03  1.0855e-01  8.6897e-01\nYola North          7.1981e-01 -1.7432e-03  1.6683e-01  1.7666e+00\nYola South         -7.4524e-01 -9.4484e-04  9.0499e-02 -2.4741e+00\nYorro               2.5338e-01 -4.0777e-04  3.9078e-02  1.2838e+00\nYunusari            2.0645e+00 -3.7849e-03  3.6149e-01  3.4399e+00\nYusufari            1.2515e+00 -1.6912e-03  1.6186e-01  3.1148e+00\nZaki                9.3733e-01 -1.6369e-03  1.5668e-01  2.3722e+00\nZango              -8.5209e-02 -7.7808e-04  7.4539e-02 -3.0925e-01\nZango-Kataf        -8.3783e-03 -2.8252e-03  2.7010e-01 -1.0685e-02\nZaria               2.1028e-01 -3.8349e-04  3.6752e-02  1.0989e+00\nZing                3.9254e-02 -1.4494e-05  1.3896e-03  1.0534e+00\nZurmi               4.7791e-02 -9.4870e-06  9.0953e-04  1.5850e+00\nZuru                3.1656e-02 -2.0854e-05  1.9993e-03  7.0845e-01\n                   Pr.z....E.Ii..\nAba North                  0.0173\nAba South                  0.0055\nAbadam                     0.0000\nAbaji                      0.5799\nAbak                       0.0009\nAbakaliki                  0.0551\nAbeokuta North             0.2454\nAbeokuta South             0.3110\nAbi                        0.6683\nAboh-Mbaise                0.8615\nAbua/Odual                 0.8924\nAbuja Municipal            0.9789\nAdavi                      0.0079\nAdo                        0.6175\nAdo-Odo/Ota                0.0365\nAdo Ekiti                  0.6471\nAfijio                     0.1577\nAfikpo North               0.9719\nAfikpo South               0.4685\nAgaie                      0.8787\nAgatu                      0.0002\nAgege                      0.0036\nAguata                     0.0753\nAgwara                     0.0798\nAhiazu-Mbaise              0.5199\nAhoada East                0.0432\nAhoada West                0.6106\nAiyedade                   0.3678\nAiyedire                   0.3661\nAiyekire (Gbonyin)         0.5881\nAjaokuta                   0.0022\nAjeromi-Ifelodun           0.0016\nAjingi                     0.0058\nAkamkpa                    0.0890\nAkinyele                   0.2567\nAkko                       0.1616\nAkoko-Edo                  0.0164\nAkoko North East           0.2811\nAkoko North West           0.4778\nAkoko South East           0.2556\nAkoko South West           0.8150\nAkpabuyo                   0.0155\nAkuku Toru                 0.4076\nAkure North                0.7423\nAkure South                0.0433\nAkwanga                    0.5254\nAlbasu                     0.0040\nAleiro                     0.1314\nAlimosho                   0.0017\nAlkaleri                   0.3221\nAmuwo-Odofin               0.0026\nAnambra East               0.0512\nAnambra West               0.6077\nAnaocha                    0.0140\nAndoni                     0.3238\nAninri                     0.2883\nAniocha North              0.2516\nAniocha South              0.8278\nAnka                       0.7288\nAnkpa                      0.0005\nApa                        0.0000\nApapa                      0.0032\nArdo-Kola                  0.9261\nArewa-Dandi                0.1758\nArgungu                    0.4524\nArochukwu                  0.0830\nAsa                        0.4948\nAsari-Toru                 0.0572\nAskira/Uba                 0.7332\nAtakumosa East             0.0959\nAtakumosa West             0.4881\nAtiba                      0.3664\nAtigbo                     0.2488\nAugie                      0.2123\nAuyo                       0.0022\nAwe                        0.3779\nAwgu                       0.0571\nAwka North                 0.5712\nAwka South                 0.1080\nAyamelum                   0.3484\nBabura                     0.0265\nBadagry                    0.0693\nBade                       0.0026\nBagudo                     0.0007\nBagwai                     0.0062\nBakassi                    0.0009\nBakori                     0.2847\nBakura                     0.8202\nBalanga                    0.2346\nBali                       0.9387\nBama                       0.0000\nBarikin Ladi               0.5225\nBaruten                    0.7417\nBassa                      0.0001\nBassa1                     0.4843\nBatagarawa                 0.7742\nBatsari                    0.5145\nBauchi                     0.0644\nBaure                      0.0472\nBayo                       0.6567\nBebeji                     0.0528\nBekwara                    0.8358\nBende                      0.9013\nBiase                      0.1398\nBichi                      0.0023\nBida                       0.4315\nBilliri                    0.7116\nBindawa                    0.2262\nBinji                      0.4306\nBiriniwa                   0.0044\nBirni Kudu                 0.0140\nBirnin-Gwari               0.2439\nBirnin Kebbi               0.0587\nBirnin Magaji              0.0877\nBiu                        0.0143\nBodinga                    0.8542\nBogoro                     0.0621\nBoki                       0.7144\nBokkos                     0.9141\nBoluwaduro                 0.2097\nBomadi                     0.0016\nBonny                      0.6031\nBorgu                      0.0608\nBoripe                     0.2777\nBosso                      0.9529\nBrass                      0.1102\nBuji                       0.0097\nBukkuyum                   0.7766\nBungudu                    0.1986\nBunkure                    0.0562\nBunza                      0.0368\nBursari                    0.0019\nBuruku                     0.8972\nBurutu                     0.0001\nBwari                      0.8953\nCalabar-Municipal          0.0103\nCalabar South              0.0276\nChanchaga                  0.9843\nCharanchi                  0.1712\nChibok                     0.0026\nChikun                     0.3109\nDala                       0.0091\nDamaturu                   0.0009\nDamban                     0.3340\nDambatta                   0.0029\nDamboa                     0.0000\nDan Musa                   0.0400\nDandi                      0.0254\nDandume                    0.8691\nDange-Shuni                0.7243\nDanja                      0.9489\nDarazo                     0.5356\nDass                       0.0622\nDaura                      0.7927\nDawakin Kudu               0.1784\nDawakin Tofa               0.0576\nDegema                     0.0014\nDekina                     0.0011\nDemsa                      0.1313\nDikwa                      0.0000\nDoguwa                     0.1042\nDoma                       0.0036\nDonga                      0.6066\nDukku                      0.1274\nDunukofia                  0.0234\nDutse                      0.0114\nDutsi                      0.7395\nDutsin-Ma                  0.0209\nEastern Obolo              0.0031\nEbonyi                     0.0353\nEdati                      0.7880\nEde North                  0.4690\nEde South                  0.7864\nEdu                        0.6654\nEfon                       0.3970\nEgbado North               0.0735\nEgbado South               0.5455\nEgbeda                     0.5629\nEgbedore                   0.6172\nEgor                       0.0242\nEhime-Mbano                0.2278\nEjigbo                     0.6607\nEkeremor                   0.0111\nEket                       0.0000\nEkiti                      0.2726\nEkiti East                 0.1806\nEkiti South West           0.2841\nEkiti West                 0.8279\nEkwusigo                   0.0036\nEleme                      0.4016\nEmohua                     0.1437\nEmure                      0.2280\nEnugu East                 0.1494\nEnugu North                0.0505\nEnugu South                0.0354\nEpe                        0.1775\nEsan Central               0.0011\nEsan North East            0.0001\nEsan South East            0.0028\nEsan West                  0.0016\nEse-Odo                    0.0024\nEsit - Eket                0.0000\nEssien Udim                0.0000\nEtche                      0.9705\nEthiope East               0.0061\nEthiope West               0.0032\nEti-Osa                    0.0034\nEtim Ekpo                  0.0000\nEtinan                     0.0003\nEtsako Central             0.0021\nEtsako East                0.0159\nEtsako West                0.0025\nEtung                      0.7706\nEwekoro                    0.2856\nEzeagu                     0.0905\nEzinihitte                 0.6224\nEzza North                 0.0198\nEzza South                 0.2377\nFagge                      0.0458\nFakai                      0.0363\nFaskari                    0.7247\nFika                       0.4103\nFufore                     0.2395\nFunakaye                   0.0363\nFune                       0.0217\nFuntua                     0.7234\nGabasawa                   0.0280\nGada                       0.1327\nGagarawa                   0.0071\nGamawa                     0.0672\nGanjuwa                    0.2612\nGanye                      0.8072\nGarki                      0.0027\nGarko                      0.0620\nGarum Mallam               0.0174\nGashaka                    0.8489\nGassol                     0.9526\nGaya                       0.0393\nGbako                      0.8161\nGboko                      0.7691\nGeidam                     0.0001\nGezawa                     0.0065\nGiade                      0.2340\nGirei                      0.0768\nGiwa                       0.0458\nGokana                     0.1141\nGombe                      0.0180\nGombi                      0.1565\nGoronyo                    0.8200\nGubio                      0.0001\nGudu                       0.2102\nGujba                      0.0292\nGulani                     0.6550\nGuma                       0.3035\nGumel                      0.0015\nGummi                      0.5250\nGurara                     0.4135\nGuri                       0.0231\nGusau                      0.6504\nGuyuk                      0.0437\nGuzamala                   0.0000\nGwadabawa                  0.3728\nGwagwalada                 0.5798\nGwale                      0.0227\nGwandu                     0.3275\nGwaram                     0.0327\nGwarzo                     0.0334\nGwer East                  0.2585\nGwer West                  0.0324\nGwiwa                      0.5093\nGwoza                      0.0176\nHadejia                    0.0003\nHawul                      0.0970\nHong                       0.2853\nIbadan North               0.7035\nIbadan North East          0.3380\nIbadan North West          0.1790\nIbadan South East          0.5193\nIbadan South West          0.2097\nIbaji                      0.0455\nIbarapa Central            0.4117\nIbarapa East               0.3448\nIbarapa North              0.2432\nIbeju/Lekki                0.4330\nIbeno                      0.0001\nIbesikpo Asutan            0.0001\nIbi                        0.9168\nIbiono Ibom                0.0001\nIdah                       0.0017\nIdanre                     0.0046\nIdeato North               0.3445\nIdeato South               0.8797\nIdemili North              0.0933\nIdemili South              0.0062\nIdo                        0.2522\nIdo-Osi                    0.3602\nIfako-Ijaye                0.0010\nIfe Central                0.6931\nIfe East                   0.3612\nIfe North                  0.2790\nIfe South                  0.0142\nIfedayo                    0.5294\nIfedore                    0.0928\nIfelodun                   0.0796\nIfelodun1                  0.3787\nIfo                        0.0101\nIgabi                      0.0447\nIgalamela-Odolu            0.6625\nIgbo-Etiti                 0.0003\nIgbo-Eze North             0.9183\nIgbo-Eze South             0.3102\nIgueben                    0.0067\nIhiala                     0.0543\nIhitte/Uboma               0.8436\nIjebu East                 0.5977\nIjebu North                0.8999\nIjebu North East           0.4656\nIjebu Ode                  0.8063\nIjero                      0.8856\nIjumu                      0.0140\nIka                        0.0002\nIka North East             0.0007\nIka South                  0.0128\nIkara                      0.0923\nIkeduru                    0.7709\nIkeja                      0.0040\nIkenne                     0.8602\nIkere                      0.9936\nIkole                      0.9118\nIkom                       0.5237\nIkono                      0.0001\nIkorodu                    0.0113\nIkot Abasi                 0.0001\nIkot Ekpene                0.0002\nIkpoba-Okha                0.0055\nIkwerre                    0.3862\nIkwo                       0.5222\nIkwuano                    0.1139\nIla                        0.2279\nIlaje                      0.0091\nIle-Oluji-Okeigbo          0.0348\nIlejemeji                  0.4302\nIlesha East                0.2252\nIlesha West                0.3614\nIllela                     0.6185\nIlorin East                0.4036\nIlorin South               0.2560\nIlorin West                0.6620\nImeko-Afon                 0.8122\nIngawa                     0.1288\nIni                        0.0071\nIpokia                     0.3972\nIrele                      0.0028\nIrepo                      0.6516\nIrepodun                   0.3016\nIrepodun/Ifelodun          0.3612\nIrepodun1                  0.5828\nIrewole                    0.7166\nIsa                        0.5714\nIse/Orun                   0.3178\nIseyin                     0.2319\nIshielu                    0.0129\nIsi-Uzo                    0.2200\nIsiala-Ngwa North          0.0588\nIsiala-Ngwa South          0.9381\nIsiala Mbano               0.7251\nIsin                       0.0544\nIsiukwuato                 0.7464\nIsokan                     0.3406\nIsoko North                0.0016\nIsoko South                0.0251\nIsu                        0.7429\nItas/Gadau                 0.0249\nItesiwaju                  0.3612\nItu                        0.0017\nIvo                        0.7585\nIwajowa                    0.1344\nIwo                        0.6252\nIzzi                       0.0351\nJaba                       0.6091\nJada                       0.1239\nJahun                      0.0000\nJakusko                    0.0270\nJalingo                    0.1511\nJama'are                   0.0241\nJega                       0.0491\nJema'a                     0.9159\nJere                       0.0000\nJibia                      0.5269\nJos East                   0.2201\nJos North                  0.5746\nJos South                  0.4139\nKabba/Bunu                 0.0040\nKabo                       0.0119\nKachia                     0.1520\nKaduna North               0.0716\nKaduna South               0.0060\nKafin Hausa                0.0049\nKafur                      0.2707\nKaga                       0.0005\nKagarko                    0.7046\nKaiama                     0.6592\nKaita                      0.6770\nKajola                     0.2411\nKajuru                     0.2026\nKala/Balge                 0.0000\nKalgo                      0.1301\nKaltungo                   0.2443\nKanam                      0.1222\nKankara                    0.0147\nKanke                      0.0784\nKankia                     0.0171\nKano Municipal             0.0188\nKarasuwa                   0.0031\nKaraye                     0.0318\nKarim-Lamido               0.8746\nKaru                       0.4334\nKatagum                    0.9714\nKatcha                     0.8649\nKatsina                    0.9780\nKatsina-Ala                0.2521\nKaugama                    0.0085\nKaura                      0.7992\nKaura Namoda               0.3082\nKauru                      0.5151\nKazaure                    0.2306\nKeana                      0.2962\nKebbe                      0.1982\nKeffi                      0.2425\nKhana                      0.1312\nKibiya                     0.1978\nKirfi                      0.1279\nKiri Kasamma               0.0019\nKiru                       0.0387\nKiyawa                     0.0025\nKogi                       0.2912\nKoko/Besse                 0.0831\nKokona                     0.8992\nKolokuma/Opokuma           0.0860\nKonduga                    0.0003\nKonshisha                  0.9828\nKontagora                  0.0803\nKosofe                     0.0011\nKubau                      0.1611\nKudan                      0.9660\nKuje                       0.8019\nKukawa                     0.0000\nKumbotso                   0.0847\nKunchi                     0.0153\nKura                       0.0327\nKurfi                      0.4142\nKurmi                      0.3868\nKusada                     0.0621\nKwali                      0.2912\nKwami                      0.0128\nKwande                     0.6355\nKware                      0.6079\nKwaya Kusar                0.3385\nLafia                      0.4103\nLagelu                     0.5215\nLagos Island               0.0006\nLagos Mainland             0.0014\nLamurde                    0.8578\nLangtang North             0.2651\nLangtang South             0.5571\nLapai                      0.1731\nLau                        0.2573\nLavun                      0.4010\nLere                       0.0468\nLogo                       0.6102\nLokoja                     0.0053\nMachina                    0.0084\nMadagali                   0.9182\nMadobi                     0.0131\nMafa                       0.0000\nMagama                     0.0790\nMagumeri                   0.0000\nMai'adua                   0.5886\nMaiduguri                  0.0000\nMaigatari                  0.0016\nMaiha                      0.3635\nMaiyama                    0.0211\nMakoda                     0.0342\nMakurdi                    0.0434\nMalam Madori               0.0053\nMalumfashi                 0.0453\nMangu                      0.3427\nMani                       0.6223\nMaradun                    0.0500\nMariga                     0.2331\nMarkafi                    0.7788\nMarte                      0.0000\nMaru                       0.5883\nMashegu                    0.3728\nMashi                      0.5962\nMatazu                     0.0506\nMayo-Belwa                 0.2903\nMbaitoli                   0.5896\nMbo                        0.0000\nMichika                    0.9346\nMiga                       0.0003\nMikang                     0.3398\nMinjibir                   0.0217\nMisau                      0.7276\nMkpat Enin                 0.0001\nMoba                       0.2315\nMobbar                     0.0000\nMokwa                      0.4111\nMonguno                    0.0000\nMopa-Muro                  0.1132\nMoro                       0.9049\nMubi North                 0.2380\nMubi South                 0.5484\nMusawa                     0.0382\nMushin                     0.0002\nMuya                       0.4599\nNafada                     0.0548\nNangere                    0.2851\nNasarawa                   0.0242\nNasarawa-Eggon             0.5139\nNasarawa1                  0.0404\nNdokwa East                0.3135\nNdokwa West                0.0257\nNembe                      0.2495\nNgala                      0.0000\nNganzai                    0.0001\nNgaski                     0.0933\nNgor-Okpala                0.7545\nNguru                      0.0045\nNingi                      0.0572\nNjaba                      0.5834\nNjikoka                    0.0203\nNkanu East                 0.0309\nNkanu West                 0.0019\nNkwerre                    0.6668\nNnewi North                0.0041\nNnewi South                0.0317\nNsit Atai                  0.0000\nNsit Ibom                  0.0001\nNsit Ubium                 0.0003\nNsukka                     0.0878\nNuman                      0.9547\nNwangele                   0.8324\nObafemi-Owode              0.3684\nObanliku                   0.5646\nObi                        0.5238\nObi Ngwa                   0.0028\nObi1                       0.3698\nObia/Akpor                 0.1884\nObokun                     0.2151\nObot Akara                 0.0060\nObowo                      0.4900\nObubra                     0.7205\nObudu                      0.5838\nOdeda                      0.6096\nOdigbo                     0.0277\nOdo-Otin                   0.0842\nOdogbolu                   0.7186\nOdukpani                   0.0005\nOffa                       0.0896\nOfu                        0.0832\nOgba/Egbema/Ndoni          0.7667\nOgbadibo                   0.9790\nOgbaru                     0.3579\nOgbia                      0.1252\nOgbomosho North            0.8978\nOgbomosho South            0.5539\nOgo Oluwa                  0.9602\nOgoja                      0.4647\nOgori/Magongo              0.0033\nOgu/Bolo                   0.2048\nOgun waterside             0.2573\nOguta                      0.1434\nOhafia                     0.4789\nOhaji/Egbema               0.3494\nOhaozara                   0.3520\nOhaukwu                    0.1432\nOhimini                    0.0020\nOji-River                  0.1217\nOjo                        0.0053\nOju                        0.1157\nOke-Ero                    0.1353\nOkehi                      0.0095\nOkene                      0.0059\nOkigwe                     0.6830\nOkitipupa                  0.0347\nOkobo                      0.0001\nOkpe                       0.0061\nOkpokwu                    0.3957\nOkrika                     0.0926\nOla-oluwa                  0.4446\nOlamabolo                  0.7549\nOlorunda                   0.4125\nOlorunsogo                 0.6021\nOluyole                    0.6863\nOmala                      0.0010\nOmumma                     0.0764\nOna-Ara                    0.2175\nOndo East                  0.0874\nOndo West                  0.0040\nOnicha                     0.1338\nOnitsha North              0.0841\nOnitsha South              0.0409\nOnna                       0.0001\nOpobo/Nkoro                0.0069\nOredo                      0.0076\nOrelope                    0.5190\nOrhionmwon                 0.0030\nOri Ire                    0.9278\nOriade                     0.3228\nOrlu                       0.7528\nOrolu                      0.5076\nOron                       0.0000\nOrsu                       0.3162\nOru East                   0.4817\nOru West                   0.4935\nOruk Anam                  0.0000\nOrumba North               0.2089\nOrumba South               0.3933\nOse                        0.0125\nOshimili North             0.9487\nOshimili South             0.0038\nOshodi-Isolo               0.0013\nOsisioma Ngwa              0.2241\nOsogbo                     0.7864\nOturkpo                    0.0022\nOvia North East            0.0136\nOvia South West            0.0056\nOwan East                  0.0014\nOwan West                  0.0320\nOwerri-Municipal           0.3752\nOwerri North               0.3324\nOwerri West                0.1472\nOwo                        0.2449\nOye                        0.6119\nOyi                        0.0220\nOyigbo                     0.3488\nOyo East                   0.3589\nOyo West                   0.3852\nOyun                       0.0842\nPaikoro                    0.9046\nPankshin                   0.1623\nPatani                     0.0309\nPategi                     0.0371\nPort-Harcourt              0.1623\nPotiskum                   0.6903\nQua'an Pan                 0.8209\nRabah                      0.7404\nRafi                       0.2748\nRano                       0.1379\nRemo North                 0.8029\nRijau                      0.2367\nRimi                       0.7886\nRimin Gado                 0.0176\nRingim                     0.0034\nRiyom                      0.8141\nRogo                       0.5430\nRoni                       0.0446\nSabon-Gari                 0.2531\nSabon Birni                0.5454\nSabuwa                     0.5029\nSafana                     0.1812\nSagbama                    0.1693\nSakaba                     0.9473\nSaki East                  0.3608\nSaki West                  0.3705\nSandamu                    0.9274\nSanga                      0.5097\nSapele                     0.0010\nSardauna                   0.8528\nShagamu                    0.0938\nShagari                    0.1787\nShanga                     0.2766\nShani                      0.9478\nShanono                    0.0228\nShelleng                   0.0591\nShendam                    0.5249\nShinkafi                   0.1561\nShira                      0.0815\nShiroro                    0.1571\nShomgom                    0.5117\nShomolu                    0.0003\nSilame                     0.3384\nSoba                       0.9509\nSokoto North               0.3794\nSokoto South               0.5295\nSong                       0.1638\nSouthern Ijaw              0.0004\nSule-Tankarkar             0.0301\nSuleja                     0.4573\nSumaila                    0.1161\nSuru                       0.0093\nSurulere                   0.0019\nSurulere1                  0.4271\nTafa                       0.2670\nTafawa-Balewa              0.0629\nTai                        0.0663\nTakai                      0.0064\nTakum                      0.2473\nTalata Mafara              0.1955\nTambuwal                   0.2471\nTangaza                    0.3661\nTarauni                    0.1143\nTarka                      0.1761\nTarmua                     0.0006\nTaura                      0.0037\nTofa                       0.0051\nToro                       0.1363\nToto                       0.0040\nToungo                     0.6622\nTsafe                      0.0945\nTsanyawa                   0.0131\nTudun Wada                 0.0448\nTureta                     0.3568\nUdenu                      0.6534\nUdi                        0.0054\nUdu                        0.0088\nUdung Uko                  0.0000\nUghelli North              0.0026\nUghelli South              0.0049\nUgwunagbo                  0.1734\nUhunmwonde                 0.0005\nUkanafun                   0.0000\nUkum                       0.6100\nUkwa East                  0.0035\nUkwa West                  0.4290\nUkwuani                    0.0436\nUmu-Nneochi                0.6048\nUmuahia North              0.7655\nUmuahia South              0.6651\nUngogo                     0.0419\nUnuimo                     0.4169\nUruan                      0.0004\nUrue-Offong/Oruko          0.0000\nUshongo                    0.6763\nUssa                       0.2581\nUvwie                      0.0214\nUyo                        0.0000\nUzo-Uwani                  0.8765\nVandeikya                  0.5546\nWamako                     0.7306\nWamba                      0.8905\nWarawa                     0.0967\nWarji                      0.0196\nWarri North                0.0007\nWarri South                0.0010\nWarri South West           0.0030\nWasagu/Danko               0.7340\nWase                       0.5936\nWudil                      0.0343\nWukari                     0.7200\nWurno                      0.8141\nWushishi                   0.8590\nYabo                       0.8708\nYagba East                 0.1259\nYagba West                 0.0092\nYakurr                     0.6985\nYala                       0.1535\nYamaltu/Deba               0.6715\nYankwashi                  0.7418\nYauri                      0.1947\nYenegoa                    0.3849\nYola North                 0.0773\nYola South                 0.0134\nYorro                      0.1992\nYunusari                   0.0006\nYusufari                   0.0018\nZaki                       0.0177\nZango                      0.7571\nZango-Kataf                0.9915\nZaria                      0.2718\nZing                       0.2921\nZurmi                      0.1130\nZuru                       0.4787\n\n\n\n13.1 Mapping Local Moran’s I\nNigeria and localMI data will be appended using cbind() method.\n\nnigeria.localMI <- cbind(nigeria,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nThe choropleths show there is evidence for both positive and negative Ii values. P value choropleth displays which area or polygon is statistically significant by comparing to significance level of 0.05.\n\nlocalMI.map <- tm_shape(nigeria.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)+\n   tm_layout(legend.height=0.25,\n            legend.width=0.35)\n\npvalue.map <- tm_shape(nigeria.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)+\n   tm_layout(legend.height=0.25,\n            legend.width=0.35)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n13.2 Moran’s Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nMoran’s scatterplot is plotted by standarized value of chosen attribute on x axis and standardized spatially lagged value (weighted average of neighbors) on y axis.\nscale() function can be used to extract z-standardized values of pct_non-functional field as below.\n\nnigeria$znf <- scale(nigeria$`pct_non-functional`) %>%\n  as.vector\n\nAfterwards, moran.plot() of spdep is used to display moran scatterplot.\n\nmoran.plot(nigeria$znf,rswm,\n           xlab=\"z-pct non-functional\", \n           ylab=\"Spatially Lagged z-pct non-functional\")\n\n\n\n\n\n\n14 Lisa Map Classes\nThere are four quadrants divided by x~0 and y~0 lines in the Moran’s scatter plot.\nWe will define the classes of quadrant by creating the codes below.\nInitialize the quadrant vector\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nSpatially lagged variable is created by passing weight matrix and variable arguments to lag.listw() function.\n\nnigeria$lagged <- lag.listw(rswm, nigeria$`pct_non-functional`)\n\nScale() method can be utilized once again for z-standardization of spatially lagged variable.\n\nnigeria$z.lagged <- scale(nigeria$lagged) %>%\n  as.vector\n\nIn the code chunk below, the following actions are executed.\n\nDefine significance level as 0.05.\nQuadrant 1 (low-low) is assigned for rows where standardized pct_non-functional < 0 and spatially lagged standardized pct_non-functional < 0.\nQuadrant 2 (low-high) is assigned for rows where standardized pct_non-functional < 0 and spatially lagged standardized pct_non-functional > 0.\nQuadrant 3 (high-low) is assigned for rows where standardized pct_non-functional > 0 and spatially lagged standardized pct_non-functional < 0.\nQuadrant 4 (high-high) is assigned for rows where standardized pct_non-functional > 0 and spatially lagged standardized pct_non-functional > 0.\nQuadrant 5 (insignificant) is assigned for rows where p-value is less than significant level of 0.05.\n\n\nsignif <- 0.05\nquadrant[nigeria$znf <0 & nigeria$z.lagged<0] <- 1\nquadrant[nigeria$znf <0 & nigeria$z.lagged>0] <- 2\nquadrant[nigeria$znf >0 & nigeria$z.lagged<0] <- 3  \nquadrant[nigeria$znf >0 & nigeria$z.lagged>0] <- 4\nquadrant[localMI[,5]>signif] <- 0\n\nFor Lisa map visualizations, it is helpful to see attribute value map and quadrant map side by side for easy comparison and analysis. The code chunk below can be written to display these choropleth maps.\n\nnonfunctional <- qtm(nigeria, \"pct_non-functional\")+\n                 tm_layout(main.title=\"Non-Functional Water Points (%)\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\n\nnigeria.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLisaMap <- tm_shape(nigeria.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title=\"Quadrant Map\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\n\ntmap_arrange(nonfunctional, LisaMap, \n             asp=1, ncol=2)\n\n\n\n\nDiscussion points:\n\nFrom non-functional water point (%) plot, it can be noted that light yellow colored polygons at the top right corner display low percentage of non-functional water points (0-0.2) while some polygons at the bottom map in maroon color show high percentage of non-functional water points (0.8-1).\nThere is evidence of clusters being present in quadrant map. Low-low quadrant/clusters (in blue) are seen to be concentrated at top right of the map whereas high-high clusters (in red) are more spread out but mostly near the bottom.\nThere are also outliers on the map as displayed by sky-blue and orange colored polygons. Outliers are detected for cases where the attribute of polygon is high but the weighted average of neighbors is low or vice versa.\nLastly, those that are not statistically significant (p<0.5) are displayed without any fill color."
  },
  {
    "objectID": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take Home Exercise/Take Home Exercise 1/Take_Home_Ex01test.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "15 Hot Spot and Cold Spot Area Analysis",
    "text": "15 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. An alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values cluster spatially.\nFirst of all, weight matrix object wm_B is prepared by passing style argument as B.\n\nwm_B <- nb2listw(knn8, \n                style=\"B\",zero.policy=TRUE)\n\n\n15.1 Local Getis-Ord Statistics\nGI statistics can be calculated in the code chunk below using localG() function of spdep and passing attribute of interest and weight matrix object.\n\nfips <- order(nigeria_1$shapeName)\ngi.fixed <- localG(nigeria_1$`pct_non-functional`, wm_B)\ngi.fixed\n\n  [1]  2.379569155  2.778574330 -4.872406131  0.553544405  3.306496196\n  [6] -1.917843080 -1.161705197 -1.013154638 -0.428439264  0.174414941\n [11]  0.135269840 -0.026490951  2.656997288 -0.499348987 -2.091103948\n [16] -0.457730315 -1.412767640 -0.035233804 -0.724882897 -0.152657500\n [21]  3.755489464 -2.909802758 -1.778871953  1.751880043  0.643508148\n [26] -2.022131707  0.509148329  0.900565902 -0.903782103 -0.541539536\n [31]  3.062305473 -3.149340183 -2.757705153  1.700597285 -1.134319324\n [36]  1.399832552  2.400768750  1.077782637  0.709795819  1.136748797\n [41]  0.234044097  2.419364679 -0.828064230  0.328836089  2.020966247\n [46]  0.634990219 -2.879367365  1.508479994 -3.135992385  0.990098505\n [51] -3.013832292 -1.950189796 -0.513413801 -2.456842180  0.986761844\n [56] -1.061924327  1.146443349 -0.217526415 -0.346735827  3.480165637\n [61]  4.408557534 -2.943215610 -0.092769103  1.353870721  0.751472483\n [66]  1.733502563  0.682625828 -1.901573367  0.340937920  1.665007429\n [71]  0.693351575 -0.903148815 -1.153374629  1.247359583 -3.056762937\n [76]  0.881813206 -1.902739668 -0.566213948 -1.607448796 -0.937770440\n [81] -2.218740410 -1.816755539 -3.015638845  3.387737298 -2.736621485\n [86]  3.307042660 -1.069892636 -0.227262351 -1.188630370 -0.076858263\n [91] -4.460041937 -0.639424243 -0.329559480  3.827364789 -0.699426389\n [96] -0.286883887 -0.651861771 -1.849311753 -1.984657054  0.444535745\n[101] -1.936297771 -0.207278770  0.123973416  1.476637200 -3.051511858\n[106]  0.786622849  0.369771694 -1.210210648  0.788227554 -2.848308226\n[111] -2.458253427  1.165207089  1.890533031 -1.707643650 -2.450062002\n[116] -0.183784317 -1.865406475  0.365996886  0.107818604  1.254485503\n[121]  3.162851950 -0.519949776  1.874713940  1.085447284  0.059051939\n[126]  1.597120510 -2.586379106 -0.283734053 -1.285447153 -1.909632570\n[131]  2.087842793 -3.099604221 -0.129226658  3.797587776  0.131632625\n[136]  2.564407741  2.203390426 -0.019619815 -1.368313888 -3.016064873\n[141]  1.013371136 -2.610132838 -3.305777664 -0.966101724 -2.978672365\n[146] -4.081386076 -2.053521471  2.234687004  0.164757631 -0.352718319\n[151] -0.064126072  0.619431041 -1.864518776 -0.262753279 -1.345773963\n[156] -1.898581019 -3.197230369  3.261022367 -1.508918231 -4.460041937\n[161] -1.624941258  2.914352075  0.514957810  1.524629241 -2.266067911\n[166] -2.530815630  0.332504471 -2.308927902  2.958805362 -2.104471585\n[171]  0.268958278  0.724063106  0.270964501  0.432469094  0.847057677\n[176] -1.789697127 -0.604560024 -0.578517120 -0.499857942  2.253777651\n[181]  1.205986929 -0.438916640  2.539967863  4.277381361  1.097169765\n[186]  1.338762499  1.071255783  0.217344827 -2.911903785 -0.838773260\n[191] -1.462312589  1.205421426 -1.441802456 -1.955969597 -2.103924892\n[196] -1.348614618  3.271320311  3.999399455  2.994274983  3.159156283\n[201]  3.032914101  4.146341613  4.406176579  0.036935729  2.739818988\n[206]  2.948008288 -2.926786375  4.770714213  3.657298651  3.080141156\n[211]  2.411368566  3.021496027 -0.291629005 -1.067836073 -1.692536917\n[216]  0.492521230 -2.329287407 -1.180737233 -1.996899975  2.093149878\n[221] -0.352215428  0.823350583 -1.176332719  2.093609983 -2.295735740\n[226]  0.353939702 -2.197392542  1.503418992 -2.694221348 -1.830264012\n[231] -1.123577025 -0.244066219 -2.999300460 -1.865999228 -2.378584873\n[236]  0.190471833  0.059483139 -2.060998277  0.232537200  0.293604152\n[241] -3.816002822 -2.718984164 -1.190104986 -1.769542258  1.996830430\n[246] -1.579876064  2.366558528 -1.416992588  0.227503248 -4.032640868\n[251]  1.252961640 -2.180854894 -0.446816405  1.029033646 -3.168849839\n[256]  0.635677294  0.817777911 -2.271799614 -0.453205785 -2.017147365\n[261] -4.495953534  0.891262012  0.553671686 -2.278837169  0.979193937\n[266] -2.135457119 -2.126942789  1.129936735  2.139236309 -0.659942072\n[271] -2.374515775 -3.617638276 -1.659766818  1.068574917 -0.380562994\n[276] -0.958101700 -1.343973903 -0.644427957 -1.254285154  2.000268522\n[281] -0.820846246 -0.944702072 -1.166958726 -0.784085582  4.042573932\n[286]  3.940770313  0.104524952  3.970305803  3.144124593  2.835218344\n[291] -0.945366205 -0.151369549 -1.678290772 -2.734640669 -1.144977325\n[296]  0.914925207 -3.278500081  0.394614975  0.913145299  1.082526999\n[301]  2.452976324  0.628854355  1.680689757  1.752843680  0.880250184\n[306] -2.572800147  2.007635889  0.436458972 -3.648659978  0.102576943\n[311] -1.014760443  2.713269686 -1.924543779  0.197227400  0.527685170\n[316] -0.125785385 -0.729609238 -0.245196944  0.143883294  2.457805602\n[321]  3.790344436  3.402123164  2.490455303 -1.683537038 -0.291254408\n[326] -2.878376968  0.176136182 -0.007998795 -0.110773354 -0.637691708\n[331]  3.829548880 -2.534521915  4.002808782  3.664695459  2.778971392\n[336] -0.866498866 -0.639966930  1.580977630  1.205682781  2.609121495\n[341]  2.110304182  0.788870617  1.212879084  0.912727044  0.497911366\n[346]  0.835230959  1.136013242  0.437216119 -0.237633895 -1.519048195\n[351]  2.691769796 -0.846607811  2.992865247 -0.451573777  1.033056637\n[356]  0.549274166  0.913145893  0.363040266 -0.565959636  0.999064181\n[361] -1.195417300 -2.487381222 -1.226463600  1.889585419  0.077708679\n[366]  0.351588316  1.923637551  0.323371062  0.952953840  3.147250225\n[371]  2.239150237  0.328043056 -2.243510013 -0.912991352  3.145108569\n[376] -0.307385553 -1.497137655 -0.488488273 -2.106708581  0.511385153\n[381] -1.538494265 -4.059147512 -2.211098688 -1.435713568 -2.256273607\n[386]  1.967288567  0.105545790 -4.433195862 -0.632709032 -1.226177807\n[391] -0.561310138 -0.817095157  2.879364994 -2.515864708  1.432433508\n[396]  1.801375416  2.745932629 -2.811586579 -1.101544552 -3.491654792\n[401]  0.379060862 -0.441027659  0.416518591 -1.172179318 -1.274283231\n[406] -4.872406131  1.513804262  1.164410173 -1.545742349 -2.439589456\n[411] -1.759825043 -2.385095456 -2.350311325 -2.954099469 -2.147277120\n[416]  0.157861556  0.783336668 -0.035793323  0.170078136 -0.027590900\n[421]  1.145325220 -2.631801790  0.254379091 -1.018939775  0.650883667\n[426] -1.198719786  1.044538261  1.286717401  1.168693525  1.509264643\n[431] -1.287855485  1.522426649 -3.101080450 -2.067468590 -3.027440081\n[436]  1.055429673  1.732977052  0.126677368  1.716843598 -3.621965307\n[441]  0.021543780  1.748802863 -3.271277956 -1.401345856  0.042646307\n[446]  0.250929568 -4.872406131 -1.723818880 -2.424392626 -2.135253615\n[451] -0.816545057  0.865473989 -1.865266061  1.055513025  2.488373227\n[456]  0.473986740 -0.513129755 -0.957161748  0.823408549 -0.641060200\n[461] -3.435308991 -3.185113240 -0.179182094 -1.114373759 -0.587134499\n[466]  1.362467706 -1.132769091  0.839842337 -1.988485990  0.509833254\n[471]  2.786100150 -2.634569705  0.102757175 -2.480252062 -4.409093465\n[476]  1.756591070 -4.267962521  0.540880378 -4.081817698 -3.164822597\n[481]  0.908746530  2.306347389 -2.118273016  2.020057600 -2.785169070\n[486] -2.001541676 -0.948902011 -0.492632193 -1.960088216  1.192429839\n[491] -0.280822231 -4.872406131  0.541329723  0.891329394  0.529871835\n[496] -1.954614360 -1.057366889 -0.539421321  4.144949825  0.082086463\n[501] -3.657269553 -0.954623859 -2.296438656 -0.348310657  3.839319677\n[506]  1.196476903 -4.495953534  0.822033000 -4.460041937  1.583770038\n[511] -0.119443111 -1.180061911 -0.600135789 -2.072738201 -3.786800402\n[516]  0.739038141  1.920423837 -1.068899514 -2.253516244  2.049986881\n[521]  0.652753082  1.007808350  2.231081607  1.151481444 -4.460041937\n[526] -4.032640868  1.678251438 -0.312656039 -2.838379906 -1.901948672\n[531] -0.548420620 -2.320217081 -2.158009982 -3.107443542 -0.430508761\n[536] -2.868633703 -2.148220378  4.212283982  3.972068135  3.653541620\n[541] -1.707074119 -0.056794043 -0.211642842 -0.899446820  0.575987868\n[546]  0.637498000  0.896833664  2.985427615 -1.315313722  1.239622653\n[551]  2.746391656  0.690239331 -0.357805478  0.547871645 -0.510603264\n[556]  2.201863168  1.726579176  0.360315602  3.456787951  1.697594305\n[561]  1.732406014 -0.296654984  0.026283575 -0.919352970  1.533283040\n[566]  0.128500066 -0.591884747 -0.049844378 -0.731089867  2.940793994\n[571] -1.267920650  1.132731836 -1.463086693  0.708062643 -0.935826704\n[576] -0.930752476 -1.463825686  3.088060406 -1.547850793 -2.786393217\n[581] -1.573000966  1.493529694  2.592239874  2.752814155 -0.408311834\n[586]  2.111855686  3.893742168  2.741861328  0.849383936 -1.681948640\n[591] -0.764508926 -0.312138566  0.819510357 -0.521343374 -0.403838712\n[596]  3.300322020  1.771831696 -1.233214068  1.709526951  2.876700366\n[601] -1.499160759 -1.727389462 -2.044289132  3.967671350  2.702504529\n[606]  2.670174636 -0.644950414  2.972452017  0.090630567  0.988633121\n[611] -0.314994011  0.662525380  4.301011894 -1.002368125 -0.703557610\n[616] -0.684746655  4.204305514 -1.256569260 -0.853673944  2.499088907\n[621] -0.064338487 -2.895087965 -3.210370178  1.215790244  0.271020374\n[626]  3.065275145  2.467476046  2.768377266  3.194465208  2.144017062\n[631] -0.886807754 -0.969278987 -1.449343427  1.162897675  0.507333160\n[636] -2.290809291  0.937008511 -0.917461079 -0.868368779  1.726823270\n[641]  0.119847576 -1.397254608  2.158510046  2.084870318 -1.397387813\n[646] -0.398381063  0.226338611 -0.331360146  1.092095259 -1.483821919\n[651] -0.249643229  1.183299964 -0.268100021 -2.374436386 -2.928712732\n[656]  0.235194054 -0.608348208 -2.008580179  1.142960649 -0.604648667\n[661] -0.669914754 -1.337151855  1.374525733  0.066094984 -0.913923946\n[666] -0.895537518 -0.091125218  0.659352064  3.278811101  0.185501582\n[671] -1.675441829  1.344756599  1.088026351  0.065459638 -2.276399115\n[676] -1.887163778 -0.635884986 -1.418339674 -1.741923001  1.414796991\n[681]  0.656234554 -3.591406260  0.957396169 -0.061609241  0.879000754\n[686]  0.628725208 -1.392423053  3.521986580 -2.169340692  0.743250929\n[691] -1.571541416  2.602511636 -3.105329711  0.794130690  1.109998362\n[696] -1.859756053 -1.836555916 -2.726548243  1.156854992 -1.294385811\n[701]  1.157397807  0.903830003 -1.579216726  1.352988596 -3.450259787\n[706] -2.900186476 -2.803329317 -1.489693753  2.874497124 -0.436850607\n[711] -1.672163072 -2.479853633 -2.006295711 -0.921524335 -0.449077417\n[716] -2.780046111  2.621041765  4.157854184  3.011842360  2.816601503\n[721]  1.361350318  3.494112315  4.071121825  0.510108225  2.923003185\n[726]  0.790983575  2.017664933 -0.517465687  0.298214826  0.432920899\n[731] -2.034382232  0.811891214  3.526336939  4.109923173  0.417546819\n[736]  1.130960407  2.301362358  4.137272040 -0.155344552  0.590899092\n[741]  0.344345956  0.137731310 -1.660878487 -2.333362209  3.405227004\n[746]  3.298957427  2.963407917 -0.339820426 -0.533580816 -2.116073631\n[751]  0.358445058 -0.235126708 -0.177647708 -0.162594403  1.530489653\n[756]  2.604489540  0.387363207 -1.427297050  0.424043185 -0.329534949\n[761]  1.296658602  0.868966628 -1.766563106 -2.474138665 -1.283842151\n[766] -3.439948353 -3.114806773 -2.372176149  0.309251024  0.010685039\n[771]  1.098891712 -1.053427585 -1.584981549  0.708445967\nattr(,\"cluster\")\n  [1] High High Low  High High Low  High Low  High High Low  High High Low  High\n [16] High Low  High High High High Low  Low  High High High Low  High Low  Low \n [31] High Low  Low  High Low  High High High High High High High Low  High Low \n [46] Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High\n [61] High Low  Low  High High Low  Low  Low  Low  High High Low  High High Low \n [76] High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low  High Low \n [91] Low  Low  Low  High Low  High Low  Low  High Low  Low  High Low  High Low \n[106] Low  High Low  High Low  Low  High Low  Low  Low  High Low  Low  Low  High\n[121] High Low  Low  High Low  High Low  Low  Low  Low  High Low  High High High\n[136] Low  High High Low  Low  High High Low  High Low  Low  Low  High High High\n[151] High High Low  High Low  Low  Low  High Low  Low  High High High High Low \n[166] Low  Low  Low  High Low  High Low  Low  High High High Low  Low  Low  High\n[181] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[196] High High High High High High High High High High High Low  High High High\n[211] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High\n[241] Low  Low  Low  Low  High High High Low  High Low  High Low  High High High\n[256] Low  Low  Low  Low  High Low  High High Low  High Low  Low  High High Low \n[271] Low  High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High\n[286] High Low  High High High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High High High High High Low  High High Low  Low  Low  High Low  High Low \n[316] High High Low  High High High Low  High Low  Low  Low  Low  High High High\n[331] High Low  High High High Low  Low  High High High High High High High High\n[346] Low  High High Low  Low  High High High Low  High High Low  High Low  Low \n[361] Low  Low  High Low  High High High Low  High High High Low  Low  Low  High\n[376] High Low  Low  Low  High High Low  Low  High Low  High High Low  Low  Low \n[391] Low  High High Low  High High Low  Low  Low  Low  High High Low  Low  Low \n[406] Low  High Low  Low  Low  Low  Low  Low  Low  High High High Low  Low  Low \n[421] Low  Low  High Low  Low  Low  High High Low  High Low  High Low  Low  Low \n[436] High High High Low  Low  Low  High Low  Low  High High Low  Low  Low  Low \n[451] Low  High Low  High High High High Low  Low  High Low  Low  Low  Low  High\n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  Low \n[481] Low  High Low  High Low  Low  Low  High Low  High Low  Low  Low  High High\n[496] Low  Low  Low  High Low  Low  Low  Low  Low  High High Low  High Low  High\n[511] High High High Low  Low  High High Low  High High High High High High Low \n[526] Low  High Low  Low  Low  High High Low  High High Low  Low  High High High\n[541] Low  Low  High Low  High Low  High High Low  High High High High High Low \n[556] High High Low  High High High Low  High Low  High Low  High High Low  High\n[571] Low  High High High Low  Low  Low  High Low  High Low  High High High High\n[586] High High High High Low  Low  High High Low  Low  High Low  High High High\n[601] Low  Low  Low  High High High High High Low  High Low  High High Low  Low \n[616] Low  High Low  Low  High Low  High Low  High High High High High High High\n[631] Low  High Low  High High High Low  Low  Low  High High Low  High High Low \n[646] Low  Low  Low  Low  Low  High High High Low  Low  Low  High Low  High High\n[661] High Low  High High High Low  High High High High High Low  High Low  Low \n[676] High Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High Low  Low \n[691] Low  High Low  High Low  Low  High Low  High High High High Low  Low  Low \n[706] Low  Low  Low  High Low  Low  Low  High High Low  Low  High High Low  High\n[721] High High High High High High High Low  Low  High Low  Low  High High High\n[736] High High High Low  Low  High High Low  Low  High High High High Low  Low \n[751] High High High High High High High Low  High Low  High High Low  High Low \n[766] Low  Low  Low  Low  Low  High Low  Low  High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nigeria_1$`pct_non-functional`, listw = wm_B)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe resulted GI statistics will be apended to nigeria dataset to facilitate data visualizations.\n\nnigeria.gi <- cbind(nigeria, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk below is used to display two choropleth maps of non-functional water points (%) map and local GI statistics map.\n\nnf <- qtm(nigeria_1, \"pct_non-functional\")+\n      tm_layout(main.title=\"Non-Functional Water Points (%)\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\n\nGimap <-tm_shape(nigeria.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title=\"Local GI Map\",\n                           main.title.size = 1,\n                           main.title.position = \"centre\",\n                 legend.height=0.25,\n                 legend.width=0.35)\n\ntmap_arrange(nf, Gimap, asp=1, ncol=2)\n\n\n\n\nDiscussion points:\n\nTop right corner of the map that corresponds to non-functional water point % from 0 to 0.2 has negative GI statistics. That denotes formation of cold spots (low value clusters) that occur when weight average of neighbors falls below the grand average.\nAs expected, high non-functional water points % areas also correspond to positive GI statistics that show presence of hot spots (high value clusters). Hot spots occur when the average of a polygon’s neighbors is higher than the grand average.\nUnlike local Moran’s I, GI statistics cannot be used to detect formation of outliers. Therefore, negative values of GI statistics should be interpreted as low value cluster but not spatial outliers.\n\n\n\n15.2 Local G Cluster Map By Significance Level\nlocalG() function of spdep does not return the p-value of each polygon that is required to filter the areas that are not statistically significant. Therefore, we will explore local_g() function of rgeoda to create a more complete cluster map.\nlocal_g() function does not take sf object as an argument. Hence, we will convert the data to tibble data frame in the code chunk below.\n\ndf <- data.frame(nigeria)\n\nThe following code chunk shows the application of local_g() to extract local G statistics and corresponding pseudo p-values. To change the permutation number and significance level, the parameters can be changed in the input fields.\n\nG <- local_g(\n  knn_weights(nigeria, 8),\n  df[\"pct_non.functional\"],\n  permutations = 999,\n  permutation_method = \"complete\",\n  significance_cutoff = 0.05,\n  seed = 1234\n)\n\nNext, we will extract colors, labels and clusters from G and afterwards use plot() method to plot local G cluster map.\n\nlisa_colors <- lisa_colors(G)\nlisa_labels <- lisa_labels(G)\nlisa_clusters <- lisa_clusters(G)\n\n\ncluster <- plot(st_geometry(nigeria), \n     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), \n     border = \"#333333\", lwd=0.2)\ntitle(main = \"Local G Cluster Map\")\nlegend('bottomright', legend = lisa_labels, fill = lisa_colors, border = \"#eeeeee\",text.font=1, cex=0.6)\n\n\n\n\nDiscussion points:\n\nThere are only two clusters available in the map as expected from GI statistics.\nHigh-high or hot spots are shown in red where non-functional water points (%) is high.\nLow-low or cold spots are shown in blue where non-functional water points(%) is low.\nThe areas that are not statistically significant do not have any fill color.\n\n\n\n15.3 Local G* Cluster Map By Significance Level\nGI* statistics is the ratio of the weighted average of the neighboring locations to the sum of all values, including the value at the location while G statistics does not include the value at the location itself.\nThe same process used in local GI can be repeated for this computation. This time, local_gstar() function is used instead to calculate GI* and its pseudo p values.\n\nGstar <- local_gstar(\n  knn_weights(nigeria, 8),\n  df[\"pct_non.functional\"],\n  permutations = 999,\n  permutation_method = \"complete\",\n  significance_cutoff = 0.05,\n  seed = 1234\n)\n\n\nlisa_colors_star <- lisa_colors(Gstar)\nlisa_labels_star <- lisa_labels(Gstar)\nlisa_clusters_star <- lisa_clusters(Gstar)\n\n\ncluster <- plot(st_geometry(nigeria), \n     col=sapply(lisa_clusters_star, function(x){return(lisa_colors_star[[x+1]])}), \n     border = \"#333333\", lwd=0.2)\ntitle(main = \"Local G* Cluster Map\")\nlegend('bottomright', legend = lisa_labels_star, fill = lisa_colors_star, border = \"#eeeeee\",text.font=1, cex=0.6)"
  }
]