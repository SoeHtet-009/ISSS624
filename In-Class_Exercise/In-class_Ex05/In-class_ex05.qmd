---
title: "In Class Exercise 5 - Geographically Weighted Logistic Regression And Applications"
author: Soe Htet
execute: 
  warning: False
  message: False
format: html
editor: visual
---

## 1 Getting Started

First, we will install and load packages required for this exercise using the code chunk below.

```{r}
pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary,funModeling,blorr,skimr,caret)
```

## 2 Importing Analytical Data

```{r}
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

```{r}
Osun <- read_rds("rds/Osun.rds")
```

freq() function of funModelling can be used to explore the proportion of classes that are within status column.

```{r}
Osun_wp_sf %>%
  freq(input="status")
```

We can view the locations of functional and non-functional water points (True and False in status column) using tmap package.

```{r}
tmap_mode("view")
tm_shape(Osun)+
  tm_polygons(alpha=0.4) + 
tm_shape(Osun_wp_sf) +
  tm_dots(col="status",
          alpha = 0.6) +
  tm_view (set.zoom.limits = c(9,12))
```

## 3 Exploratory Data Analysis

skim() function of skimr package is a great tool for exploratory data analysis. We will first analyze the summary statistics of the data table using skim().

```{r}
Osun_wp_sf %>%
  skim()
```

As there are some missing values in the data, the code chunk below is written to remove rows with incomplete information.

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(water_point_population,
                 local_population_1km),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

## 4 Checking Correlation Between Variables For Regression

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7,35:39,42:43,46:47,57)) %>%
  st_set_geometry(NULL)
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

glm() of R is used to calibrate a logistic regression from the water point status.

```{r}
model <- glm(status ~ distance_to_primary_road+
               distance_to_secondary_road+
               distance_to_tertiary_road+
               distance_to_city+
               distance_to_town+
               is_urban+
               usage_capacity+
               water_source_clean+
               water_point_population+
               local_population_1km,
             data=Osun_wp_sf_clean,
             family=binomial(link="logit"))
```

blr_regress() of blorr package is then used to create the output of logistic regression model.

```{r}
blr_regress(model)
```

From the model report, we observed that distance_to_primary_road and distance_to_secondary_road are not statistically significant (p value \> 0.05). Therefore, the model will be adjusted and exclude these variables.

```{r}
model_adjust <- glm(status ~
               distance_to_tertiary_road+
               distance_to_city+
               distance_to_town+
               is_urban+
               usage_capacity+
               water_source_clean+
               water_point_population+
               local_population_1km,
             data=Osun_wp_sf_clean,
             family=binomial(link="logit"))
```

```{r}
blr_regress(model_adjust)
```

The confusion matrix can be built using blr_confusion_matrix() function. Both the original logistic regression model and adjusted version are produced for comparison.

```{r}
blr_confusion_matrix(model,cutoff=0.5)
```

```{r}
blr_confusion_matrix(model_adjust,cutoff=0.5)
```

The first model is able to achieve sensitivity and specificity values of 0.7207 and 0.6154 while the adjusted version produces slight worse results of 0.7188 and 0.6149.

Although these are decent results, they can be further improved by also considering geographical factors. We will explore how to compute geographically weighted logistic regression in the next section.

## 5 Building Geographically Weighted Logistic Regression

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
              select(c(status,
                       distance_to_primary_road,
               distance_to_secondary_road,
               distance_to_tertiary_road,
               distance_to_city,
               distance_to_town,
               is_urban,
               usage_capacity,
               water_source_clean,
               water_point_population,
               local_population_1km)) %>%
  as_Spatial()
```

### 5.1 Building Fixed Bandwidth

```{r}
bw.fixed <- bw.ggwr(status ~
               distance_to_tertiary_road+
               distance_to_city+
               distance_to_town+
               is_urban+
               usage_capacity+
               water_source_clean+
               water_point_population+
               local_population_1km,
             data=Osun_wp_sp,
             family="binomial",
             approach = "AIC",
             kernel = "gaussian",
             adaptive = FALSE,
             longlat = FALSE)
                     
```

```{r}
bw.fixed
```

ggwr.basic() function of GWmodel package is useful to build generalized GWR model. The implementation of the function is displayed below.

```{r}
gwlr.fixed <- ggwr.basic(status ~
                           distance_to_tertiary_road+
                           distance_to_city+
                           distance_to_town+
                           water_point_population+
                           local_population_1km+
                           is_urban+
                           usage_capacity+
                           water_source_clean,
                         data=Osun_wp_sp,
                         bw = bw.fixed,
                         family="binomial",
                         kernel = "gaussian",
                         adaptive = FALSE,
                         longlat = FALSE)
```

## 6 Converting SDF to Data Frame

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5,T,F
  ))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
```

```{r}
CM <- confusionMatrix(data=gwr.fixed$most,reference=gwr.fixed$y)
CM
```

The results of logistic regression model are significantly improved after incorporating geographical information to the model. Sensitivity and specificity scores are elevated to 0.8671 and 0.8986 while the overall accuracy of the model is 0.8846 which is a clear improvement from the previous model without geographical elements.

## 7 Visualizing With Interactive Plots Using Tmap

Next, we will display the values of yhat from GWLR model using interactive tmap mode. The following columns will be first selected to facilitate the plotting of the map.

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN,ADM2_PCODE,ADM1_EN,ADM1_PCODE,status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected,gwr.fixed)
```

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun) +
  tm_polygons(alpha=0.1) +
  tm_shape(gwr_sf.fixed) +
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))

prob_T
```

```{r}
tertiary_TV <- tm_shape(Osun)+
  tm_polygons(alpha=0.1)+
  tm_shape(gwr_sf.fixed)+
  tm_dots(col="distance_to_tertiary_road_TV",
          border.col="gray60",
          border.lwd=1)+
  tm_view(set.zoom.limits=c(8,14))
tertiary_TV
```
